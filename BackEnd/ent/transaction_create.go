// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/wallet"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (tc *TransactionCreate) SetAmount(i int) *TransactionCreate {
	tc.mutation.SetAmount(i)
	return tc
}

// SetTax sets the "tax" field.
func (tc *TransactionCreate) SetTax(i int) *TransactionCreate {
	tc.mutation.SetTax(i)
	return tc
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTax(i *int) *TransactionCreate {
	if i != nil {
		tc.SetTax(*i)
	}
	return tc
}

// SetTotalAmount sets the "total_amount" field.
func (tc *TransactionCreate) SetTotalAmount(i int) *TransactionCreate {
	tc.mutation.SetTotalAmount(i)
	return tc
}

// SetTransactionDate sets the "transaction_date" field.
func (tc *TransactionCreate) SetTransactionDate(t time.Time) *TransactionCreate {
	tc.mutation.SetTransactionDate(t)
	return tc
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTransactionDate(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetTransactionDate(*t)
	}
	return tc
}

// SetFromCommunityID sets the "from_community_id" field.
func (tc *TransactionCreate) SetFromCommunityID(i int) *TransactionCreate {
	tc.mutation.SetFromCommunityID(i)
	return tc
}

// SetNillableFromCommunityID sets the "from_community_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableFromCommunityID(i *int) *TransactionCreate {
	if i != nil {
		tc.SetFromCommunityID(*i)
	}
	return tc
}

// SetToCommunityID sets the "to_community_id" field.
func (tc *TransactionCreate) SetToCommunityID(i int) *TransactionCreate {
	tc.mutation.SetToCommunityID(i)
	return tc
}

// SetNillableToCommunityID sets the "to_community_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableToCommunityID(i *int) *TransactionCreate {
	if i != nil {
		tc.SetToCommunityID(*i)
	}
	return tc
}

// SetFromWalletID sets the "from_wallet_id" field.
func (tc *TransactionCreate) SetFromWalletID(i int) *TransactionCreate {
	tc.mutation.SetFromWalletID(i)
	return tc
}

// SetNillableFromWalletID sets the "from_wallet_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableFromWalletID(i *int) *TransactionCreate {
	if i != nil {
		tc.SetFromWalletID(*i)
	}
	return tc
}

// SetToWalletID sets the "to_wallet_id" field.
func (tc *TransactionCreate) SetToWalletID(i int) *TransactionCreate {
	tc.mutation.SetToWalletID(i)
	return tc
}

// SetNillableToWalletID sets the "to_wallet_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableToWalletID(i *int) *TransactionCreate {
	if i != nil {
		tc.SetToWalletID(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(u uuid.UUID) *TransactionCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableID(u *uuid.UUID) *TransactionCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetFromCommunity sets the "from_community" edge to the Community entity.
func (tc *TransactionCreate) SetFromCommunity(c *Community) *TransactionCreate {
	return tc.SetFromCommunityID(c.ID)
}

// SetToCommunity sets the "to_community" edge to the Community entity.
func (tc *TransactionCreate) SetToCommunity(c *Community) *TransactionCreate {
	return tc.SetToCommunityID(c.ID)
}

// SetFromWallet sets the "from_wallet" edge to the Wallet entity.
func (tc *TransactionCreate) SetFromWallet(w *Wallet) *TransactionCreate {
	return tc.SetFromWalletID(w.ID)
}

// SetToWallet sets the "to_wallet" edge to the Wallet entity.
func (tc *TransactionCreate) SetToWallet(w *Wallet) *TransactionCreate {
	return tc.SetToWalletID(w.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.Tax(); !ok {
		v := transaction.DefaultTax
		tc.mutation.SetTax(v)
	}
	if _, ok := tc.mutation.TransactionDate(); !ok {
		v := transaction.DefaultTransactionDate()
		tc.mutation.SetTransactionDate(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transaction.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transaction.amount"`)}
	}
	if v, ok := tc.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Tax(); !ok {
		return &ValidationError{Name: "tax", err: errors.New(`ent: missing required field "Transaction.tax"`)}
	}
	if v, ok := tc.mutation.Tax(); ok {
		if err := transaction.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Transaction.tax": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TotalAmount(); !ok {
		return &ValidationError{Name: "total_amount", err: errors.New(`ent: missing required field "Transaction.total_amount"`)}
	}
	if v, ok := tc.mutation.TotalAmount(); ok {
		if err := transaction.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.total_amount": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TransactionDate(); !ok {
		return &ValidationError{Name: "transaction_date", err: errors.New(`ent: missing required field "Transaction.transaction_date"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.Tax(); ok {
		_spec.SetField(transaction.FieldTax, field.TypeInt, value)
		_node.Tax = value
	}
	if value, ok := tc.mutation.TotalAmount(); ok {
		_spec.SetField(transaction.FieldTotalAmount, field.TypeInt, value)
		_node.TotalAmount = value
	}
	if value, ok := tc.mutation.TransactionDate(); ok {
		_spec.SetField(transaction.FieldTransactionDate, field.TypeTime, value)
		_node.TransactionDate = value
	}
	if nodes := tc.mutation.FromCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromCommunityTable,
			Columns: []string{transaction.FromCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromCommunityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ToCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToCommunityTable,
			Columns: []string{transaction.ToCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToCommunityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.FromWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromWalletTable,
			Columns: []string{transaction.FromWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromWalletID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ToWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToWalletTable,
			Columns: []string{transaction.ToWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToWalletID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
