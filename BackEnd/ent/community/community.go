// Code generated by ent, DO NOT EDIT.

package community

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the community type in the database.
	Label = "community"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOwnerUserID holds the string denoting the owner_user_id field in the database.
	FieldOwnerUserID = "owner_user_id"
	// EdgeWallets holds the string denoting the wallets edge name in mutations.
	EdgeWallets = "wallets"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeFromTransactions holds the string denoting the from_transactions edge name in mutations.
	EdgeFromTransactions = "from_transactions"
	// EdgeToTransactions holds the string denoting the to_transactions edge name in mutations.
	EdgeToTransactions = "to_transactions"
	// Table holds the table name of the community in the database.
	Table = "communities"
	// WalletsTable is the table that holds the wallets relation/edge.
	WalletsTable = "wallets"
	// WalletsInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	WalletsInverseTable = "wallets"
	// WalletsColumn is the table column denoting the wallets relation/edge.
	WalletsColumn = "community_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "communities"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_user_id"
	// FromTransactionsTable is the table that holds the from_transactions relation/edge.
	FromTransactionsTable = "transactions"
	// FromTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	FromTransactionsInverseTable = "transactions"
	// FromTransactionsColumn is the table column denoting the from_transactions relation/edge.
	FromTransactionsColumn = "from_community_id"
	// ToTransactionsTable is the table that holds the to_transactions relation/edge.
	ToTransactionsTable = "transactions"
	// ToTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	ToTransactionsInverseTable = "transactions"
	// ToTransactionsColumn is the table column denoting the to_transactions relation/edge.
	ToTransactionsColumn = "to_community_id"
)

// Columns holds all SQL columns for community fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldRate,
	FieldTax,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOwnerUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRate holds the default value on creation for the "rate" field.
	DefaultRate float32
	// RateValidator is a validator for the "rate" field. It is called by the builders before save.
	RateValidator func(float32) error
	// DefaultTax holds the default value on creation for the "tax" field.
	DefaultTax float32
	// TaxValidator is a validator for the "tax" field. It is called by the builders before save.
	TaxValidator func(float32) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Community queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByTax orders the results by the tax field.
func ByTax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTax, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerUserID orders the results by the owner_user_id field.
func ByOwnerUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerUserID, opts...).ToFunc()
}

// ByWalletsCount orders the results by wallets count.
func ByWalletsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWalletsStep(), opts...)
	}
}

// ByWallets orders the results by wallets terms.
func ByWallets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWalletsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromTransactionsCount orders the results by from_transactions count.
func ByFromTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFromTransactionsStep(), opts...)
	}
}

// ByFromTransactions orders the results by from_transactions terms.
func ByFromTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToTransactionsCount orders the results by to_transactions count.
func ByToTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToTransactionsStep(), opts...)
	}
}

// ByToTransactions orders the results by to_transactions terms.
func ByToTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWalletsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WalletsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WalletsTable, WalletsColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newFromTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FromTransactionsTable, FromTransactionsColumn),
	)
}
func newToTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToTransactionsTable, ToTransactionsColumn),
	)
}
