// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/predicate"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/user"
	"suwasystem/backend/ent/wallet"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommunity   = "Community"
	TypeTransaction = "Transaction"
	TypeUser        = "User"
	TypeWallet      = "Wallet"
)

// CommunityMutation represents an operation that mutates the Community nodes in the graph.
type CommunityMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	name                     *string
	description              *string
	rate                     *float32
	addrate                  *float32
	tax                      *float32
	addtax                   *float32
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	wallets                  map[int]struct{}
	removedwallets           map[int]struct{}
	clearedwallets           bool
	owner                    *uuid.UUID
	clearedowner             bool
	from_transactions        map[uuid.UUID]struct{}
	removedfrom_transactions map[uuid.UUID]struct{}
	clearedfrom_transactions bool
	to_transactions          map[uuid.UUID]struct{}
	removedto_transactions   map[uuid.UUID]struct{}
	clearedto_transactions   bool
	done                     bool
	oldValue                 func(context.Context) (*Community, error)
	predicates               []predicate.Community
}

var _ ent.Mutation = (*CommunityMutation)(nil)

// communityOption allows management of the mutation configuration using functional options.
type communityOption func(*CommunityMutation)

// newCommunityMutation creates new mutation for the Community entity.
func newCommunityMutation(c config, op Op, opts ...communityOption) *CommunityMutation {
	m := &CommunityMutation{
		config:        c,
		op:            op,
		typ:           TypeCommunity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommunityID sets the ID field of the mutation.
func withCommunityID(id int) communityOption {
	return func(m *CommunityMutation) {
		var (
			err   error
			once  sync.Once
			value *Community
		)
		m.oldValue = func(ctx context.Context) (*Community, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Community.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommunity sets the old Community of the mutation.
func withCommunity(node *Community) communityOption {
	return func(m *CommunityMutation) {
		m.oldValue = func(context.Context) (*Community, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommunityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommunityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommunityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommunityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Community.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CommunityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CommunityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CommunityMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CommunityMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CommunityMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CommunityMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[community.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CommunityMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[community.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CommunityMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, community.FieldDescription)
}

// SetRate sets the "rate" field.
func (m *CommunityMutation) SetRate(f float32) {
	m.rate = &f
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *CommunityMutation) Rate() (r float32, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldRate(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds f to the "rate" field.
func (m *CommunityMutation) AddRate(f float32) {
	if m.addrate != nil {
		*m.addrate += f
	} else {
		m.addrate = &f
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *CommunityMutation) AddedRate() (r float32, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate resets all changes to the "rate" field.
func (m *CommunityMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
}

// SetTax sets the "tax" field.
func (m *CommunityMutation) SetTax(f float32) {
	m.tax = &f
	m.addtax = nil
}

// Tax returns the value of the "tax" field in the mutation.
func (m *CommunityMutation) Tax() (r float32, exists bool) {
	v := m.tax
	if v == nil {
		return
	}
	return *v, true
}

// OldTax returns the old "tax" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldTax(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTax: %w", err)
	}
	return oldValue.Tax, nil
}

// AddTax adds f to the "tax" field.
func (m *CommunityMutation) AddTax(f float32) {
	if m.addtax != nil {
		*m.addtax += f
	} else {
		m.addtax = &f
	}
}

// AddedTax returns the value that was added to the "tax" field in this mutation.
func (m *CommunityMutation) AddedTax() (r float32, exists bool) {
	v := m.addtax
	if v == nil {
		return
	}
	return *v, true
}

// ResetTax resets all changes to the "tax" field.
func (m *CommunityMutation) ResetTax() {
	m.tax = nil
	m.addtax = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommunityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommunityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommunityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommunityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommunityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommunityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetOwnerUserID sets the "owner_user_id" field.
func (m *CommunityMutation) SetOwnerUserID(u uuid.UUID) {
	m.owner = &u
}

// OwnerUserID returns the value of the "owner_user_id" field in the mutation.
func (m *CommunityMutation) OwnerUserID() (r uuid.UUID, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerUserID returns the old "owner_user_id" field's value of the Community entity.
// If the Community object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommunityMutation) OldOwnerUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerUserID: %w", err)
	}
	return oldValue.OwnerUserID, nil
}

// ClearOwnerUserID clears the value of the "owner_user_id" field.
func (m *CommunityMutation) ClearOwnerUserID() {
	m.owner = nil
	m.clearedFields[community.FieldOwnerUserID] = struct{}{}
}

// OwnerUserIDCleared returns if the "owner_user_id" field was cleared in this mutation.
func (m *CommunityMutation) OwnerUserIDCleared() bool {
	_, ok := m.clearedFields[community.FieldOwnerUserID]
	return ok
}

// ResetOwnerUserID resets all changes to the "owner_user_id" field.
func (m *CommunityMutation) ResetOwnerUserID() {
	m.owner = nil
	delete(m.clearedFields, community.FieldOwnerUserID)
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by ids.
func (m *CommunityMutation) AddWalletIDs(ids ...int) {
	if m.wallets == nil {
		m.wallets = make(map[int]struct{})
	}
	for i := range ids {
		m.wallets[ids[i]] = struct{}{}
	}
}

// ClearWallets clears the "wallets" edge to the Wallet entity.
func (m *CommunityMutation) ClearWallets() {
	m.clearedwallets = true
}

// WalletsCleared reports if the "wallets" edge to the Wallet entity was cleared.
func (m *CommunityMutation) WalletsCleared() bool {
	return m.clearedwallets
}

// RemoveWalletIDs removes the "wallets" edge to the Wallet entity by IDs.
func (m *CommunityMutation) RemoveWalletIDs(ids ...int) {
	if m.removedwallets == nil {
		m.removedwallets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.wallets, ids[i])
		m.removedwallets[ids[i]] = struct{}{}
	}
}

// RemovedWallets returns the removed IDs of the "wallets" edge to the Wallet entity.
func (m *CommunityMutation) RemovedWalletsIDs() (ids []int) {
	for id := range m.removedwallets {
		ids = append(ids, id)
	}
	return
}

// WalletsIDs returns the "wallets" edge IDs in the mutation.
func (m *CommunityMutation) WalletsIDs() (ids []int) {
	for id := range m.wallets {
		ids = append(ids, id)
	}
	return
}

// ResetWallets resets all changes to the "wallets" edge.
func (m *CommunityMutation) ResetWallets() {
	m.wallets = nil
	m.clearedwallets = false
	m.removedwallets = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *CommunityMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *CommunityMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[community.FieldOwnerUserID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *CommunityMutation) OwnerCleared() bool {
	return m.OwnerUserIDCleared() || m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *CommunityMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *CommunityMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *CommunityMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddFromTransactionIDs adds the "from_transactions" edge to the Transaction entity by ids.
func (m *CommunityMutation) AddFromTransactionIDs(ids ...uuid.UUID) {
	if m.from_transactions == nil {
		m.from_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.from_transactions[ids[i]] = struct{}{}
	}
}

// ClearFromTransactions clears the "from_transactions" edge to the Transaction entity.
func (m *CommunityMutation) ClearFromTransactions() {
	m.clearedfrom_transactions = true
}

// FromTransactionsCleared reports if the "from_transactions" edge to the Transaction entity was cleared.
func (m *CommunityMutation) FromTransactionsCleared() bool {
	return m.clearedfrom_transactions
}

// RemoveFromTransactionIDs removes the "from_transactions" edge to the Transaction entity by IDs.
func (m *CommunityMutation) RemoveFromTransactionIDs(ids ...uuid.UUID) {
	if m.removedfrom_transactions == nil {
		m.removedfrom_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.from_transactions, ids[i])
		m.removedfrom_transactions[ids[i]] = struct{}{}
	}
}

// RemovedFromTransactions returns the removed IDs of the "from_transactions" edge to the Transaction entity.
func (m *CommunityMutation) RemovedFromTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedfrom_transactions {
		ids = append(ids, id)
	}
	return
}

// FromTransactionsIDs returns the "from_transactions" edge IDs in the mutation.
func (m *CommunityMutation) FromTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.from_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetFromTransactions resets all changes to the "from_transactions" edge.
func (m *CommunityMutation) ResetFromTransactions() {
	m.from_transactions = nil
	m.clearedfrom_transactions = false
	m.removedfrom_transactions = nil
}

// AddToTransactionIDs adds the "to_transactions" edge to the Transaction entity by ids.
func (m *CommunityMutation) AddToTransactionIDs(ids ...uuid.UUID) {
	if m.to_transactions == nil {
		m.to_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.to_transactions[ids[i]] = struct{}{}
	}
}

// ClearToTransactions clears the "to_transactions" edge to the Transaction entity.
func (m *CommunityMutation) ClearToTransactions() {
	m.clearedto_transactions = true
}

// ToTransactionsCleared reports if the "to_transactions" edge to the Transaction entity was cleared.
func (m *CommunityMutation) ToTransactionsCleared() bool {
	return m.clearedto_transactions
}

// RemoveToTransactionIDs removes the "to_transactions" edge to the Transaction entity by IDs.
func (m *CommunityMutation) RemoveToTransactionIDs(ids ...uuid.UUID) {
	if m.removedto_transactions == nil {
		m.removedto_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.to_transactions, ids[i])
		m.removedto_transactions[ids[i]] = struct{}{}
	}
}

// RemovedToTransactions returns the removed IDs of the "to_transactions" edge to the Transaction entity.
func (m *CommunityMutation) RemovedToTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedto_transactions {
		ids = append(ids, id)
	}
	return
}

// ToTransactionsIDs returns the "to_transactions" edge IDs in the mutation.
func (m *CommunityMutation) ToTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.to_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetToTransactions resets all changes to the "to_transactions" edge.
func (m *CommunityMutation) ResetToTransactions() {
	m.to_transactions = nil
	m.clearedto_transactions = false
	m.removedto_transactions = nil
}

// Where appends a list predicates to the CommunityMutation builder.
func (m *CommunityMutation) Where(ps ...predicate.Community) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommunityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommunityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Community, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommunityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommunityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Community).
func (m *CommunityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommunityMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, community.FieldName)
	}
	if m.description != nil {
		fields = append(fields, community.FieldDescription)
	}
	if m.rate != nil {
		fields = append(fields, community.FieldRate)
	}
	if m.tax != nil {
		fields = append(fields, community.FieldTax)
	}
	if m.created_at != nil {
		fields = append(fields, community.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, community.FieldUpdatedAt)
	}
	if m.owner != nil {
		fields = append(fields, community.FieldOwnerUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommunityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case community.FieldName:
		return m.Name()
	case community.FieldDescription:
		return m.Description()
	case community.FieldRate:
		return m.Rate()
	case community.FieldTax:
		return m.Tax()
	case community.FieldCreatedAt:
		return m.CreatedAt()
	case community.FieldUpdatedAt:
		return m.UpdatedAt()
	case community.FieldOwnerUserID:
		return m.OwnerUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommunityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case community.FieldName:
		return m.OldName(ctx)
	case community.FieldDescription:
		return m.OldDescription(ctx)
	case community.FieldRate:
		return m.OldRate(ctx)
	case community.FieldTax:
		return m.OldTax(ctx)
	case community.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case community.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case community.FieldOwnerUserID:
		return m.OldOwnerUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Community field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case community.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case community.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case community.FieldRate:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	case community.FieldTax:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTax(v)
		return nil
	case community.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case community.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case community.FieldOwnerUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommunityMutation) AddedFields() []string {
	var fields []string
	if m.addrate != nil {
		fields = append(fields, community.FieldRate)
	}
	if m.addtax != nil {
		fields = append(fields, community.FieldTax)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommunityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case community.FieldRate:
		return m.AddedRate()
	case community.FieldTax:
		return m.AddedTax()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommunityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case community.FieldRate:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	case community.FieldTax:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTax(v)
		return nil
	}
	return fmt.Errorf("unknown Community numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommunityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(community.FieldDescription) {
		fields = append(fields, community.FieldDescription)
	}
	if m.FieldCleared(community.FieldOwnerUserID) {
		fields = append(fields, community.FieldOwnerUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommunityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommunityMutation) ClearField(name string) error {
	switch name {
	case community.FieldDescription:
		m.ClearDescription()
		return nil
	case community.FieldOwnerUserID:
		m.ClearOwnerUserID()
		return nil
	}
	return fmt.Errorf("unknown Community nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommunityMutation) ResetField(name string) error {
	switch name {
	case community.FieldName:
		m.ResetName()
		return nil
	case community.FieldDescription:
		m.ResetDescription()
		return nil
	case community.FieldRate:
		m.ResetRate()
		return nil
	case community.FieldTax:
		m.ResetTax()
		return nil
	case community.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case community.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case community.FieldOwnerUserID:
		m.ResetOwnerUserID()
		return nil
	}
	return fmt.Errorf("unknown Community field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommunityMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.wallets != nil {
		edges = append(edges, community.EdgeWallets)
	}
	if m.owner != nil {
		edges = append(edges, community.EdgeOwner)
	}
	if m.from_transactions != nil {
		edges = append(edges, community.EdgeFromTransactions)
	}
	if m.to_transactions != nil {
		edges = append(edges, community.EdgeToTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommunityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case community.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.wallets))
		for id := range m.wallets {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case community.EdgeFromTransactions:
		ids := make([]ent.Value, 0, len(m.from_transactions))
		for id := range m.from_transactions {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeToTransactions:
		ids := make([]ent.Value, 0, len(m.to_transactions))
		for id := range m.to_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommunityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedwallets != nil {
		edges = append(edges, community.EdgeWallets)
	}
	if m.removedfrom_transactions != nil {
		edges = append(edges, community.EdgeFromTransactions)
	}
	if m.removedto_transactions != nil {
		edges = append(edges, community.EdgeToTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommunityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case community.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.removedwallets))
		for id := range m.removedwallets {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeFromTransactions:
		ids := make([]ent.Value, 0, len(m.removedfrom_transactions))
		for id := range m.removedfrom_transactions {
			ids = append(ids, id)
		}
		return ids
	case community.EdgeToTransactions:
		ids := make([]ent.Value, 0, len(m.removedto_transactions))
		for id := range m.removedto_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommunityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedwallets {
		edges = append(edges, community.EdgeWallets)
	}
	if m.clearedowner {
		edges = append(edges, community.EdgeOwner)
	}
	if m.clearedfrom_transactions {
		edges = append(edges, community.EdgeFromTransactions)
	}
	if m.clearedto_transactions {
		edges = append(edges, community.EdgeToTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommunityMutation) EdgeCleared(name string) bool {
	switch name {
	case community.EdgeWallets:
		return m.clearedwallets
	case community.EdgeOwner:
		return m.clearedowner
	case community.EdgeFromTransactions:
		return m.clearedfrom_transactions
	case community.EdgeToTransactions:
		return m.clearedto_transactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommunityMutation) ClearEdge(name string) error {
	switch name {
	case community.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Community unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommunityMutation) ResetEdge(name string) error {
	switch name {
	case community.EdgeWallets:
		m.ResetWallets()
		return nil
	case community.EdgeOwner:
		m.ResetOwner()
		return nil
	case community.EdgeFromTransactions:
		m.ResetFromTransactions()
		return nil
	case community.EdgeToTransactions:
		m.ResetToTransactions()
		return nil
	}
	return fmt.Errorf("unknown Community edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	amount                *int
	addamount             *int
	tax                   *int
	addtax                *int
	total_amount          *int
	addtotal_amount       *int
	transaction_date      *time.Time
	clearedFields         map[string]struct{}
	from_community        *int
	clearedfrom_community bool
	to_community          *int
	clearedto_community   bool
	from_wallet           *int
	clearedfrom_wallet    bool
	to_wallet             *int
	clearedto_wallet      bool
	done                  bool
	oldValue              func(context.Context) (*Transaction, error)
	predicates            []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id uuid.UUID) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Transaction entities.
func (m *TransactionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *TransactionMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TransactionMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *TransactionMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *TransactionMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *TransactionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetTax sets the "tax" field.
func (m *TransactionMutation) SetTax(i int) {
	m.tax = &i
	m.addtax = nil
}

// Tax returns the value of the "tax" field in the mutation.
func (m *TransactionMutation) Tax() (r int, exists bool) {
	v := m.tax
	if v == nil {
		return
	}
	return *v, true
}

// OldTax returns the old "tax" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTax(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTax: %w", err)
	}
	return oldValue.Tax, nil
}

// AddTax adds i to the "tax" field.
func (m *TransactionMutation) AddTax(i int) {
	if m.addtax != nil {
		*m.addtax += i
	} else {
		m.addtax = &i
	}
}

// AddedTax returns the value that was added to the "tax" field in this mutation.
func (m *TransactionMutation) AddedTax() (r int, exists bool) {
	v := m.addtax
	if v == nil {
		return
	}
	return *v, true
}

// ResetTax resets all changes to the "tax" field.
func (m *TransactionMutation) ResetTax() {
	m.tax = nil
	m.addtax = nil
}

// SetTotalAmount sets the "total_amount" field.
func (m *TransactionMutation) SetTotalAmount(i int) {
	m.total_amount = &i
	m.addtotal_amount = nil
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *TransactionMutation) TotalAmount() (r int, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTotalAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// AddTotalAmount adds i to the "total_amount" field.
func (m *TransactionMutation) AddTotalAmount(i int) {
	if m.addtotal_amount != nil {
		*m.addtotal_amount += i
	} else {
		m.addtotal_amount = &i
	}
}

// AddedTotalAmount returns the value that was added to the "total_amount" field in this mutation.
func (m *TransactionMutation) AddedTotalAmount() (r int, exists bool) {
	v := m.addtotal_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *TransactionMutation) ResetTotalAmount() {
	m.total_amount = nil
	m.addtotal_amount = nil
}

// SetTransactionDate sets the "transaction_date" field.
func (m *TransactionMutation) SetTransactionDate(t time.Time) {
	m.transaction_date = &t
}

// TransactionDate returns the value of the "transaction_date" field in the mutation.
func (m *TransactionMutation) TransactionDate() (r time.Time, exists bool) {
	v := m.transaction_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionDate returns the old "transaction_date" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransactionDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionDate: %w", err)
	}
	return oldValue.TransactionDate, nil
}

// ResetTransactionDate resets all changes to the "transaction_date" field.
func (m *TransactionMutation) ResetTransactionDate() {
	m.transaction_date = nil
}

// SetFromCommunityID sets the "from_community_id" field.
func (m *TransactionMutation) SetFromCommunityID(i int) {
	m.from_community = &i
}

// FromCommunityID returns the value of the "from_community_id" field in the mutation.
func (m *TransactionMutation) FromCommunityID() (r int, exists bool) {
	v := m.from_community
	if v == nil {
		return
	}
	return *v, true
}

// OldFromCommunityID returns the old "from_community_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldFromCommunityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromCommunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromCommunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromCommunityID: %w", err)
	}
	return oldValue.FromCommunityID, nil
}

// ClearFromCommunityID clears the value of the "from_community_id" field.
func (m *TransactionMutation) ClearFromCommunityID() {
	m.from_community = nil
	m.clearedFields[transaction.FieldFromCommunityID] = struct{}{}
}

// FromCommunityIDCleared returns if the "from_community_id" field was cleared in this mutation.
func (m *TransactionMutation) FromCommunityIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldFromCommunityID]
	return ok
}

// ResetFromCommunityID resets all changes to the "from_community_id" field.
func (m *TransactionMutation) ResetFromCommunityID() {
	m.from_community = nil
	delete(m.clearedFields, transaction.FieldFromCommunityID)
}

// SetToCommunityID sets the "to_community_id" field.
func (m *TransactionMutation) SetToCommunityID(i int) {
	m.to_community = &i
}

// ToCommunityID returns the value of the "to_community_id" field in the mutation.
func (m *TransactionMutation) ToCommunityID() (r int, exists bool) {
	v := m.to_community
	if v == nil {
		return
	}
	return *v, true
}

// OldToCommunityID returns the old "to_community_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldToCommunityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToCommunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToCommunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToCommunityID: %w", err)
	}
	return oldValue.ToCommunityID, nil
}

// ClearToCommunityID clears the value of the "to_community_id" field.
func (m *TransactionMutation) ClearToCommunityID() {
	m.to_community = nil
	m.clearedFields[transaction.FieldToCommunityID] = struct{}{}
}

// ToCommunityIDCleared returns if the "to_community_id" field was cleared in this mutation.
func (m *TransactionMutation) ToCommunityIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldToCommunityID]
	return ok
}

// ResetToCommunityID resets all changes to the "to_community_id" field.
func (m *TransactionMutation) ResetToCommunityID() {
	m.to_community = nil
	delete(m.clearedFields, transaction.FieldToCommunityID)
}

// SetFromWalletID sets the "from_wallet_id" field.
func (m *TransactionMutation) SetFromWalletID(i int) {
	m.from_wallet = &i
}

// FromWalletID returns the value of the "from_wallet_id" field in the mutation.
func (m *TransactionMutation) FromWalletID() (r int, exists bool) {
	v := m.from_wallet
	if v == nil {
		return
	}
	return *v, true
}

// OldFromWalletID returns the old "from_wallet_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldFromWalletID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromWalletID: %w", err)
	}
	return oldValue.FromWalletID, nil
}

// ClearFromWalletID clears the value of the "from_wallet_id" field.
func (m *TransactionMutation) ClearFromWalletID() {
	m.from_wallet = nil
	m.clearedFields[transaction.FieldFromWalletID] = struct{}{}
}

// FromWalletIDCleared returns if the "from_wallet_id" field was cleared in this mutation.
func (m *TransactionMutation) FromWalletIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldFromWalletID]
	return ok
}

// ResetFromWalletID resets all changes to the "from_wallet_id" field.
func (m *TransactionMutation) ResetFromWalletID() {
	m.from_wallet = nil
	delete(m.clearedFields, transaction.FieldFromWalletID)
}

// SetToWalletID sets the "to_wallet_id" field.
func (m *TransactionMutation) SetToWalletID(i int) {
	m.to_wallet = &i
}

// ToWalletID returns the value of the "to_wallet_id" field in the mutation.
func (m *TransactionMutation) ToWalletID() (r int, exists bool) {
	v := m.to_wallet
	if v == nil {
		return
	}
	return *v, true
}

// OldToWalletID returns the old "to_wallet_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldToWalletID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToWalletID: %w", err)
	}
	return oldValue.ToWalletID, nil
}

// ClearToWalletID clears the value of the "to_wallet_id" field.
func (m *TransactionMutation) ClearToWalletID() {
	m.to_wallet = nil
	m.clearedFields[transaction.FieldToWalletID] = struct{}{}
}

// ToWalletIDCleared returns if the "to_wallet_id" field was cleared in this mutation.
func (m *TransactionMutation) ToWalletIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldToWalletID]
	return ok
}

// ResetToWalletID resets all changes to the "to_wallet_id" field.
func (m *TransactionMutation) ResetToWalletID() {
	m.to_wallet = nil
	delete(m.clearedFields, transaction.FieldToWalletID)
}

// ClearFromCommunity clears the "from_community" edge to the Community entity.
func (m *TransactionMutation) ClearFromCommunity() {
	m.clearedfrom_community = true
	m.clearedFields[transaction.FieldFromCommunityID] = struct{}{}
}

// FromCommunityCleared reports if the "from_community" edge to the Community entity was cleared.
func (m *TransactionMutation) FromCommunityCleared() bool {
	return m.FromCommunityIDCleared() || m.clearedfrom_community
}

// FromCommunityIDs returns the "from_community" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromCommunityID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) FromCommunityIDs() (ids []int) {
	if id := m.from_community; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromCommunity resets all changes to the "from_community" edge.
func (m *TransactionMutation) ResetFromCommunity() {
	m.from_community = nil
	m.clearedfrom_community = false
}

// ClearToCommunity clears the "to_community" edge to the Community entity.
func (m *TransactionMutation) ClearToCommunity() {
	m.clearedto_community = true
	m.clearedFields[transaction.FieldToCommunityID] = struct{}{}
}

// ToCommunityCleared reports if the "to_community" edge to the Community entity was cleared.
func (m *TransactionMutation) ToCommunityCleared() bool {
	return m.ToCommunityIDCleared() || m.clearedto_community
}

// ToCommunityIDs returns the "to_community" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToCommunityID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) ToCommunityIDs() (ids []int) {
	if id := m.to_community; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToCommunity resets all changes to the "to_community" edge.
func (m *TransactionMutation) ResetToCommunity() {
	m.to_community = nil
	m.clearedto_community = false
}

// ClearFromWallet clears the "from_wallet" edge to the Wallet entity.
func (m *TransactionMutation) ClearFromWallet() {
	m.clearedfrom_wallet = true
	m.clearedFields[transaction.FieldFromWalletID] = struct{}{}
}

// FromWalletCleared reports if the "from_wallet" edge to the Wallet entity was cleared.
func (m *TransactionMutation) FromWalletCleared() bool {
	return m.FromWalletIDCleared() || m.clearedfrom_wallet
}

// FromWalletIDs returns the "from_wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromWalletID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) FromWalletIDs() (ids []int) {
	if id := m.from_wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromWallet resets all changes to the "from_wallet" edge.
func (m *TransactionMutation) ResetFromWallet() {
	m.from_wallet = nil
	m.clearedfrom_wallet = false
}

// ClearToWallet clears the "to_wallet" edge to the Wallet entity.
func (m *TransactionMutation) ClearToWallet() {
	m.clearedto_wallet = true
	m.clearedFields[transaction.FieldToWalletID] = struct{}{}
}

// ToWalletCleared reports if the "to_wallet" edge to the Wallet entity was cleared.
func (m *TransactionMutation) ToWalletCleared() bool {
	return m.ToWalletIDCleared() || m.clearedto_wallet
}

// ToWalletIDs returns the "to_wallet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToWalletID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) ToWalletIDs() (ids []int) {
	if id := m.to_wallet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToWallet resets all changes to the "to_wallet" edge.
func (m *TransactionMutation) ResetToWallet() {
	m.to_wallet = nil
	m.clearedto_wallet = false
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.amount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	if m.tax != nil {
		fields = append(fields, transaction.FieldTax)
	}
	if m.total_amount != nil {
		fields = append(fields, transaction.FieldTotalAmount)
	}
	if m.transaction_date != nil {
		fields = append(fields, transaction.FieldTransactionDate)
	}
	if m.from_community != nil {
		fields = append(fields, transaction.FieldFromCommunityID)
	}
	if m.to_community != nil {
		fields = append(fields, transaction.FieldToCommunityID)
	}
	if m.from_wallet != nil {
		fields = append(fields, transaction.FieldFromWalletID)
	}
	if m.to_wallet != nil {
		fields = append(fields, transaction.FieldToWalletID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.Amount()
	case transaction.FieldTax:
		return m.Tax()
	case transaction.FieldTotalAmount:
		return m.TotalAmount()
	case transaction.FieldTransactionDate:
		return m.TransactionDate()
	case transaction.FieldFromCommunityID:
		return m.FromCommunityID()
	case transaction.FieldToCommunityID:
		return m.ToCommunityID()
	case transaction.FieldFromWalletID:
		return m.FromWalletID()
	case transaction.FieldToWalletID:
		return m.ToWalletID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldAmount:
		return m.OldAmount(ctx)
	case transaction.FieldTax:
		return m.OldTax(ctx)
	case transaction.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case transaction.FieldTransactionDate:
		return m.OldTransactionDate(ctx)
	case transaction.FieldFromCommunityID:
		return m.OldFromCommunityID(ctx)
	case transaction.FieldToCommunityID:
		return m.OldToCommunityID(ctx)
	case transaction.FieldFromWalletID:
		return m.OldFromWalletID(ctx)
	case transaction.FieldToWalletID:
		return m.OldToWalletID(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case transaction.FieldTax:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTax(v)
		return nil
	case transaction.FieldTotalAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case transaction.FieldTransactionDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionDate(v)
		return nil
	case transaction.FieldFromCommunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromCommunityID(v)
		return nil
	case transaction.FieldToCommunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToCommunityID(v)
		return nil
	case transaction.FieldFromWalletID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromWalletID(v)
		return nil
	case transaction.FieldToWalletID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToWalletID(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	if m.addtax != nil {
		fields = append(fields, transaction.FieldTax)
	}
	if m.addtotal_amount != nil {
		fields = append(fields, transaction.FieldTotalAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.AddedAmount()
	case transaction.FieldTax:
		return m.AddedTax()
	case transaction.FieldTotalAmount:
		return m.AddedTotalAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case transaction.FieldTax:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTax(v)
		return nil
	case transaction.FieldTotalAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transaction.FieldFromCommunityID) {
		fields = append(fields, transaction.FieldFromCommunityID)
	}
	if m.FieldCleared(transaction.FieldToCommunityID) {
		fields = append(fields, transaction.FieldToCommunityID)
	}
	if m.FieldCleared(transaction.FieldFromWalletID) {
		fields = append(fields, transaction.FieldFromWalletID)
	}
	if m.FieldCleared(transaction.FieldToWalletID) {
		fields = append(fields, transaction.FieldToWalletID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	switch name {
	case transaction.FieldFromCommunityID:
		m.ClearFromCommunityID()
		return nil
	case transaction.FieldToCommunityID:
		m.ClearToCommunityID()
		return nil
	case transaction.FieldFromWalletID:
		m.ClearFromWalletID()
		return nil
	case transaction.FieldToWalletID:
		m.ClearToWalletID()
		return nil
	}
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldAmount:
		m.ResetAmount()
		return nil
	case transaction.FieldTax:
		m.ResetTax()
		return nil
	case transaction.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case transaction.FieldTransactionDate:
		m.ResetTransactionDate()
		return nil
	case transaction.FieldFromCommunityID:
		m.ResetFromCommunityID()
		return nil
	case transaction.FieldToCommunityID:
		m.ResetToCommunityID()
		return nil
	case transaction.FieldFromWalletID:
		m.ResetFromWalletID()
		return nil
	case transaction.FieldToWalletID:
		m.ResetToWalletID()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.from_community != nil {
		edges = append(edges, transaction.EdgeFromCommunity)
	}
	if m.to_community != nil {
		edges = append(edges, transaction.EdgeToCommunity)
	}
	if m.from_wallet != nil {
		edges = append(edges, transaction.EdgeFromWallet)
	}
	if m.to_wallet != nil {
		edges = append(edges, transaction.EdgeToWallet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeFromCommunity:
		if id := m.from_community; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeToCommunity:
		if id := m.to_community; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeFromWallet:
		if id := m.from_wallet; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeToWallet:
		if id := m.to_wallet; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedfrom_community {
		edges = append(edges, transaction.EdgeFromCommunity)
	}
	if m.clearedto_community {
		edges = append(edges, transaction.EdgeToCommunity)
	}
	if m.clearedfrom_wallet {
		edges = append(edges, transaction.EdgeFromWallet)
	}
	if m.clearedto_wallet {
		edges = append(edges, transaction.EdgeToWallet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	switch name {
	case transaction.EdgeFromCommunity:
		return m.clearedfrom_community
	case transaction.EdgeToCommunity:
		return m.clearedto_community
	case transaction.EdgeFromWallet:
		return m.clearedfrom_wallet
	case transaction.EdgeToWallet:
		return m.clearedto_wallet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	switch name {
	case transaction.EdgeFromCommunity:
		m.ClearFromCommunity()
		return nil
	case transaction.EdgeToCommunity:
		m.ClearToCommunity()
		return nil
	case transaction.EdgeFromWallet:
		m.ClearFromWallet()
		return nil
	case transaction.EdgeToWallet:
		m.ClearToWallet()
		return nil
	}
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	switch name {
	case transaction.EdgeFromCommunity:
		m.ResetFromCommunity()
		return nil
	case transaction.EdgeToCommunity:
		m.ResetToCommunity()
		return nil
	case transaction.EdgeFromWallet:
		m.ResetFromWallet()
		return nil
	case transaction.EdgeToWallet:
		m.ResetToWallet()
		return nil
	}
	return fmt.Errorf("unknown Transaction edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	_type                    *user.Type
	email                    *string
	password_hash            *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	wallets                  map[int]struct{}
	removedwallets           map[int]struct{}
	clearedwallets           bool
	owner_communities        map[int]struct{}
	removedowner_communities map[int]struct{}
	clearedowner_communities bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (m *UserMutation) ClearPasswordHash() {
	m.password_hash = nil
	m.clearedFields[user.FieldPasswordHash] = struct{}{}
}

// PasswordHashCleared returns if the "password_hash" field was cleared in this mutation.
func (m *UserMutation) PasswordHashCleared() bool {
	_, ok := m.clearedFields[user.FieldPasswordHash]
	return ok
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
	delete(m.clearedFields, user.FieldPasswordHash)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by ids.
func (m *UserMutation) AddWalletIDs(ids ...int) {
	if m.wallets == nil {
		m.wallets = make(map[int]struct{})
	}
	for i := range ids {
		m.wallets[ids[i]] = struct{}{}
	}
}

// ClearWallets clears the "wallets" edge to the Wallet entity.
func (m *UserMutation) ClearWallets() {
	m.clearedwallets = true
}

// WalletsCleared reports if the "wallets" edge to the Wallet entity was cleared.
func (m *UserMutation) WalletsCleared() bool {
	return m.clearedwallets
}

// RemoveWalletIDs removes the "wallets" edge to the Wallet entity by IDs.
func (m *UserMutation) RemoveWalletIDs(ids ...int) {
	if m.removedwallets == nil {
		m.removedwallets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.wallets, ids[i])
		m.removedwallets[ids[i]] = struct{}{}
	}
}

// RemovedWallets returns the removed IDs of the "wallets" edge to the Wallet entity.
func (m *UserMutation) RemovedWalletsIDs() (ids []int) {
	for id := range m.removedwallets {
		ids = append(ids, id)
	}
	return
}

// WalletsIDs returns the "wallets" edge IDs in the mutation.
func (m *UserMutation) WalletsIDs() (ids []int) {
	for id := range m.wallets {
		ids = append(ids, id)
	}
	return
}

// ResetWallets resets all changes to the "wallets" edge.
func (m *UserMutation) ResetWallets() {
	m.wallets = nil
	m.clearedwallets = false
	m.removedwallets = nil
}

// AddOwnerCommunityIDs adds the "owner_communities" edge to the Community entity by ids.
func (m *UserMutation) AddOwnerCommunityIDs(ids ...int) {
	if m.owner_communities == nil {
		m.owner_communities = make(map[int]struct{})
	}
	for i := range ids {
		m.owner_communities[ids[i]] = struct{}{}
	}
}

// ClearOwnerCommunities clears the "owner_communities" edge to the Community entity.
func (m *UserMutation) ClearOwnerCommunities() {
	m.clearedowner_communities = true
}

// OwnerCommunitiesCleared reports if the "owner_communities" edge to the Community entity was cleared.
func (m *UserMutation) OwnerCommunitiesCleared() bool {
	return m.clearedowner_communities
}

// RemoveOwnerCommunityIDs removes the "owner_communities" edge to the Community entity by IDs.
func (m *UserMutation) RemoveOwnerCommunityIDs(ids ...int) {
	if m.removedowner_communities == nil {
		m.removedowner_communities = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.owner_communities, ids[i])
		m.removedowner_communities[ids[i]] = struct{}{}
	}
}

// RemovedOwnerCommunities returns the removed IDs of the "owner_communities" edge to the Community entity.
func (m *UserMutation) RemovedOwnerCommunitiesIDs() (ids []int) {
	for id := range m.removedowner_communities {
		ids = append(ids, id)
	}
	return
}

// OwnerCommunitiesIDs returns the "owner_communities" edge IDs in the mutation.
func (m *UserMutation) OwnerCommunitiesIDs() (ids []int) {
	for id := range m.owner_communities {
		ids = append(ids, id)
	}
	return
}

// ResetOwnerCommunities resets all changes to the "owner_communities" edge.
func (m *UserMutation) ResetOwnerCommunities() {
	m.owner_communities = nil
	m.clearedowner_communities = false
	m.removedowner_communities = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldType:
		return m.GetType()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldType:
		return m.OldType(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldPasswordHash) {
		fields = append(fields, user.FieldPasswordHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldPasswordHash:
		m.ClearPasswordHash()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldType:
		m.ResetType()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.wallets != nil {
		edges = append(edges, user.EdgeWallets)
	}
	if m.owner_communities != nil {
		edges = append(edges, user.EdgeOwnerCommunities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.wallets))
		for id := range m.wallets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOwnerCommunities:
		ids := make([]ent.Value, 0, len(m.owner_communities))
		for id := range m.owner_communities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedwallets != nil {
		edges = append(edges, user.EdgeWallets)
	}
	if m.removedowner_communities != nil {
		edges = append(edges, user.EdgeOwnerCommunities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeWallets:
		ids := make([]ent.Value, 0, len(m.removedwallets))
		for id := range m.removedwallets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOwnerCommunities:
		ids := make([]ent.Value, 0, len(m.removedowner_communities))
		for id := range m.removedowner_communities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedwallets {
		edges = append(edges, user.EdgeWallets)
	}
	if m.clearedowner_communities {
		edges = append(edges, user.EdgeOwnerCommunities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeWallets:
		return m.clearedwallets
	case user.EdgeOwnerCommunities:
		return m.clearedowner_communities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeWallets:
		m.ResetWallets()
		return nil
	case user.EdgeOwnerCommunities:
		m.ResetOwnerCommunities()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WalletMutation represents an operation that mutates the Wallet nodes in the graph.
type WalletMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	balance                  *int
	addbalance               *int
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	user                     *uuid.UUID
	cleareduser              bool
	community                *int
	clearedcommunity         bool
	from_transactions        map[uuid.UUID]struct{}
	removedfrom_transactions map[uuid.UUID]struct{}
	clearedfrom_transactions bool
	to_transactions          map[uuid.UUID]struct{}
	removedto_transactions   map[uuid.UUID]struct{}
	clearedto_transactions   bool
	done                     bool
	oldValue                 func(context.Context) (*Wallet, error)
	predicates               []predicate.Wallet
}

var _ ent.Mutation = (*WalletMutation)(nil)

// walletOption allows management of the mutation configuration using functional options.
type walletOption func(*WalletMutation)

// newWalletMutation creates new mutation for the Wallet entity.
func newWalletMutation(c config, op Op, opts ...walletOption) *WalletMutation {
	m := &WalletMutation{
		config:        c,
		op:            op,
		typ:           TypeWallet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWalletID sets the ID field of the mutation.
func withWalletID(id int) walletOption {
	return func(m *WalletMutation) {
		var (
			err   error
			once  sync.Once
			value *Wallet
		)
		m.oldValue = func(ctx context.Context) (*Wallet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Wallet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWallet sets the old Wallet of the mutation.
func withWallet(node *Wallet) walletOption {
	return func(m *WalletMutation) {
		m.oldValue = func(context.Context) (*Wallet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WalletMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WalletMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WalletMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WalletMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Wallet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBalance sets the "balance" field.
func (m *WalletMutation) SetBalance(i int) {
	m.balance = &i
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *WalletMutation) Balance() (r int, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldBalance(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds i to the "balance" field.
func (m *WalletMutation) AddBalance(i int) {
	if m.addbalance != nil {
		*m.addbalance += i
	} else {
		m.addbalance = &i
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *WalletMutation) AddedBalance() (r int, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *WalletMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WalletMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WalletMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WalletMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WalletMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WalletMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WalletMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *WalletMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WalletMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *WalletMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[wallet.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *WalletMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[wallet.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WalletMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, wallet.FieldUserID)
}

// SetCommunityID sets the "community_id" field.
func (m *WalletMutation) SetCommunityID(i int) {
	m.community = &i
}

// CommunityID returns the value of the "community_id" field in the mutation.
func (m *WalletMutation) CommunityID() (r int, exists bool) {
	v := m.community
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunityID returns the old "community_id" field's value of the Wallet entity.
// If the Wallet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WalletMutation) OldCommunityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunityID: %w", err)
	}
	return oldValue.CommunityID, nil
}

// ClearCommunityID clears the value of the "community_id" field.
func (m *WalletMutation) ClearCommunityID() {
	m.community = nil
	m.clearedFields[wallet.FieldCommunityID] = struct{}{}
}

// CommunityIDCleared returns if the "community_id" field was cleared in this mutation.
func (m *WalletMutation) CommunityIDCleared() bool {
	_, ok := m.clearedFields[wallet.FieldCommunityID]
	return ok
}

// ResetCommunityID resets all changes to the "community_id" field.
func (m *WalletMutation) ResetCommunityID() {
	m.community = nil
	delete(m.clearedFields, wallet.FieldCommunityID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *WalletMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[wallet.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WalletMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WalletMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WalletMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearCommunity clears the "community" edge to the Community entity.
func (m *WalletMutation) ClearCommunity() {
	m.clearedcommunity = true
	m.clearedFields[wallet.FieldCommunityID] = struct{}{}
}

// CommunityCleared reports if the "community" edge to the Community entity was cleared.
func (m *WalletMutation) CommunityCleared() bool {
	return m.CommunityIDCleared() || m.clearedcommunity
}

// CommunityIDs returns the "community" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommunityID instead. It exists only for internal usage by the builders.
func (m *WalletMutation) CommunityIDs() (ids []int) {
	if id := m.community; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommunity resets all changes to the "community" edge.
func (m *WalletMutation) ResetCommunity() {
	m.community = nil
	m.clearedcommunity = false
}

// AddFromTransactionIDs adds the "from_transactions" edge to the Transaction entity by ids.
func (m *WalletMutation) AddFromTransactionIDs(ids ...uuid.UUID) {
	if m.from_transactions == nil {
		m.from_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.from_transactions[ids[i]] = struct{}{}
	}
}

// ClearFromTransactions clears the "from_transactions" edge to the Transaction entity.
func (m *WalletMutation) ClearFromTransactions() {
	m.clearedfrom_transactions = true
}

// FromTransactionsCleared reports if the "from_transactions" edge to the Transaction entity was cleared.
func (m *WalletMutation) FromTransactionsCleared() bool {
	return m.clearedfrom_transactions
}

// RemoveFromTransactionIDs removes the "from_transactions" edge to the Transaction entity by IDs.
func (m *WalletMutation) RemoveFromTransactionIDs(ids ...uuid.UUID) {
	if m.removedfrom_transactions == nil {
		m.removedfrom_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.from_transactions, ids[i])
		m.removedfrom_transactions[ids[i]] = struct{}{}
	}
}

// RemovedFromTransactions returns the removed IDs of the "from_transactions" edge to the Transaction entity.
func (m *WalletMutation) RemovedFromTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedfrom_transactions {
		ids = append(ids, id)
	}
	return
}

// FromTransactionsIDs returns the "from_transactions" edge IDs in the mutation.
func (m *WalletMutation) FromTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.from_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetFromTransactions resets all changes to the "from_transactions" edge.
func (m *WalletMutation) ResetFromTransactions() {
	m.from_transactions = nil
	m.clearedfrom_transactions = false
	m.removedfrom_transactions = nil
}

// AddToTransactionIDs adds the "to_transactions" edge to the Transaction entity by ids.
func (m *WalletMutation) AddToTransactionIDs(ids ...uuid.UUID) {
	if m.to_transactions == nil {
		m.to_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.to_transactions[ids[i]] = struct{}{}
	}
}

// ClearToTransactions clears the "to_transactions" edge to the Transaction entity.
func (m *WalletMutation) ClearToTransactions() {
	m.clearedto_transactions = true
}

// ToTransactionsCleared reports if the "to_transactions" edge to the Transaction entity was cleared.
func (m *WalletMutation) ToTransactionsCleared() bool {
	return m.clearedto_transactions
}

// RemoveToTransactionIDs removes the "to_transactions" edge to the Transaction entity by IDs.
func (m *WalletMutation) RemoveToTransactionIDs(ids ...uuid.UUID) {
	if m.removedto_transactions == nil {
		m.removedto_transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.to_transactions, ids[i])
		m.removedto_transactions[ids[i]] = struct{}{}
	}
}

// RemovedToTransactions returns the removed IDs of the "to_transactions" edge to the Transaction entity.
func (m *WalletMutation) RemovedToTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedto_transactions {
		ids = append(ids, id)
	}
	return
}

// ToTransactionsIDs returns the "to_transactions" edge IDs in the mutation.
func (m *WalletMutation) ToTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.to_transactions {
		ids = append(ids, id)
	}
	return
}

// ResetToTransactions resets all changes to the "to_transactions" edge.
func (m *WalletMutation) ResetToTransactions() {
	m.to_transactions = nil
	m.clearedto_transactions = false
	m.removedto_transactions = nil
}

// Where appends a list predicates to the WalletMutation builder.
func (m *WalletMutation) Where(ps ...predicate.Wallet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WalletMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WalletMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Wallet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WalletMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WalletMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Wallet).
func (m *WalletMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WalletMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.balance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	if m.created_at != nil {
		fields = append(fields, wallet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wallet.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, wallet.FieldUserID)
	}
	if m.community != nil {
		fields = append(fields, wallet.FieldCommunityID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WalletMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldBalance:
		return m.Balance()
	case wallet.FieldCreatedAt:
		return m.CreatedAt()
	case wallet.FieldUpdatedAt:
		return m.UpdatedAt()
	case wallet.FieldUserID:
		return m.UserID()
	case wallet.FieldCommunityID:
		return m.CommunityID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WalletMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wallet.FieldBalance:
		return m.OldBalance(ctx)
	case wallet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wallet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wallet.FieldUserID:
		return m.OldUserID(ctx)
	case wallet.FieldCommunityID:
		return m.OldCommunityID(ctx)
	}
	return nil, fmt.Errorf("unknown Wallet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case wallet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wallet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wallet.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case wallet.FieldCommunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunityID(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WalletMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, wallet.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WalletMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wallet.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WalletMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wallet.FieldBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Wallet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WalletMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(wallet.FieldUserID) {
		fields = append(fields, wallet.FieldUserID)
	}
	if m.FieldCleared(wallet.FieldCommunityID) {
		fields = append(fields, wallet.FieldCommunityID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WalletMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WalletMutation) ClearField(name string) error {
	switch name {
	case wallet.FieldUserID:
		m.ClearUserID()
		return nil
	case wallet.FieldCommunityID:
		m.ClearCommunityID()
		return nil
	}
	return fmt.Errorf("unknown Wallet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WalletMutation) ResetField(name string) error {
	switch name {
	case wallet.FieldBalance:
		m.ResetBalance()
		return nil
	case wallet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wallet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wallet.FieldUserID:
		m.ResetUserID()
		return nil
	case wallet.FieldCommunityID:
		m.ResetCommunityID()
		return nil
	}
	return fmt.Errorf("unknown Wallet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WalletMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, wallet.EdgeUser)
	}
	if m.community != nil {
		edges = append(edges, wallet.EdgeCommunity)
	}
	if m.from_transactions != nil {
		edges = append(edges, wallet.EdgeFromTransactions)
	}
	if m.to_transactions != nil {
		edges = append(edges, wallet.EdgeToTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WalletMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case wallet.EdgeCommunity:
		if id := m.community; id != nil {
			return []ent.Value{*id}
		}
	case wallet.EdgeFromTransactions:
		ids := make([]ent.Value, 0, len(m.from_transactions))
		for id := range m.from_transactions {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeToTransactions:
		ids := make([]ent.Value, 0, len(m.to_transactions))
		for id := range m.to_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WalletMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedfrom_transactions != nil {
		edges = append(edges, wallet.EdgeFromTransactions)
	}
	if m.removedto_transactions != nil {
		edges = append(edges, wallet.EdgeToTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WalletMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case wallet.EdgeFromTransactions:
		ids := make([]ent.Value, 0, len(m.removedfrom_transactions))
		for id := range m.removedfrom_transactions {
			ids = append(ids, id)
		}
		return ids
	case wallet.EdgeToTransactions:
		ids := make([]ent.Value, 0, len(m.removedto_transactions))
		for id := range m.removedto_transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WalletMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, wallet.EdgeUser)
	}
	if m.clearedcommunity {
		edges = append(edges, wallet.EdgeCommunity)
	}
	if m.clearedfrom_transactions {
		edges = append(edges, wallet.EdgeFromTransactions)
	}
	if m.clearedto_transactions {
		edges = append(edges, wallet.EdgeToTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WalletMutation) EdgeCleared(name string) bool {
	switch name {
	case wallet.EdgeUser:
		return m.cleareduser
	case wallet.EdgeCommunity:
		return m.clearedcommunity
	case wallet.EdgeFromTransactions:
		return m.clearedfrom_transactions
	case wallet.EdgeToTransactions:
		return m.clearedto_transactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WalletMutation) ClearEdge(name string) error {
	switch name {
	case wallet.EdgeUser:
		m.ClearUser()
		return nil
	case wallet.EdgeCommunity:
		m.ClearCommunity()
		return nil
	}
	return fmt.Errorf("unknown Wallet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WalletMutation) ResetEdge(name string) error {
	switch name {
	case wallet.EdgeUser:
		m.ResetUser()
		return nil
	case wallet.EdgeCommunity:
		m.ResetCommunity()
		return nil
	case wallet.EdgeFromTransactions:
		m.ResetFromTransactions()
		return nil
	case wallet.EdgeToTransactions:
		m.ResetToTransactions()
		return nil
	}
	return fmt.Errorf("unknown Wallet edge %s", name)
}
