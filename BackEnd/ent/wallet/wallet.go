// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the wallet type in the database.
	Label = "wallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCommunityID holds the string denoting the community_id field in the database.
	FieldCommunityID = "community_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCommunity holds the string denoting the community edge name in mutations.
	EdgeCommunity = "community"
	// EdgeFromTransactions holds the string denoting the from_transactions edge name in mutations.
	EdgeFromTransactions = "from_transactions"
	// EdgeToTransactions holds the string denoting the to_transactions edge name in mutations.
	EdgeToTransactions = "to_transactions"
	// Table holds the table name of the wallet in the database.
	Table = "wallets"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "wallets"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CommunityTable is the table that holds the community relation/edge.
	CommunityTable = "wallets"
	// CommunityInverseTable is the table name for the Community entity.
	// It exists in this package in order to avoid circular dependency with the "community" package.
	CommunityInverseTable = "communities"
	// CommunityColumn is the table column denoting the community relation/edge.
	CommunityColumn = "community_id"
	// FromTransactionsTable is the table that holds the from_transactions relation/edge.
	FromTransactionsTable = "transactions"
	// FromTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	FromTransactionsInverseTable = "transactions"
	// FromTransactionsColumn is the table column denoting the from_transactions relation/edge.
	FromTransactionsColumn = "from_wallet_id"
	// ToTransactionsTable is the table that holds the to_transactions relation/edge.
	ToTransactionsTable = "transactions"
	// ToTransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	ToTransactionsInverseTable = "transactions"
	// ToTransactionsColumn is the table column denoting the to_transactions relation/edge.
	ToTransactionsColumn = "to_wallet_id"
)

// Columns holds all SQL columns for wallet fields.
var Columns = []string{
	FieldID,
	FieldBalance,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldCommunityID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance int
	// BalanceValidator is a validator for the "balance" field. It is called by the builders before save.
	BalanceValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Wallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCommunityID orders the results by the community_id field.
func ByCommunityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommunityID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommunityField orders the results by community field.
func ByCommunityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommunityStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromTransactionsCount orders the results by from_transactions count.
func ByFromTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFromTransactionsStep(), opts...)
	}
}

// ByFromTransactions orders the results by from_transactions terms.
func ByFromTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToTransactionsCount orders the results by to_transactions count.
func ByToTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToTransactionsStep(), opts...)
	}
}

// ByToTransactions orders the results by to_transactions terms.
func ByToTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCommunityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommunityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CommunityTable, CommunityColumn),
	)
}
func newFromTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FromTransactionsTable, FromTransactionsColumn),
	)
}
func newToTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToTransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToTransactionsTable, ToTransactionsColumn),
	)
}
