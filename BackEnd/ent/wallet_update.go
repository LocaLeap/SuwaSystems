// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/predicate"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/user"
	"suwasystem/backend/ent/wallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (wu *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetBalance sets the "balance" field.
func (wu *WalletUpdate) SetBalance(i int) *WalletUpdate {
	wu.mutation.ResetBalance()
	wu.mutation.SetBalance(i)
	return wu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableBalance(i *int) *WalletUpdate {
	if i != nil {
		wu.SetBalance(*i)
	}
	return wu
}

// AddBalance adds i to the "balance" field.
func (wu *WalletUpdate) AddBalance(i int) *WalletUpdate {
	wu.mutation.AddBalance(i)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WalletUpdate) SetCreatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCreatedAt(t *time.Time) *WalletUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WalletUpdate) SetUpdatedAt(t time.Time) *WalletUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WalletUpdate) SetUserID(u uuid.UUID) *WalletUpdate {
	wu.mutation.SetUserID(u)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableUserID(u *uuid.UUID) *WalletUpdate {
	if u != nil {
		wu.SetUserID(*u)
	}
	return wu
}

// ClearUserID clears the value of the "user_id" field.
func (wu *WalletUpdate) ClearUserID() *WalletUpdate {
	wu.mutation.ClearUserID()
	return wu
}

// SetCommunityID sets the "community_id" field.
func (wu *WalletUpdate) SetCommunityID(i int) *WalletUpdate {
	wu.mutation.SetCommunityID(i)
	return wu
}

// SetNillableCommunityID sets the "community_id" field if the given value is not nil.
func (wu *WalletUpdate) SetNillableCommunityID(i *int) *WalletUpdate {
	if i != nil {
		wu.SetCommunityID(*i)
	}
	return wu
}

// ClearCommunityID clears the value of the "community_id" field.
func (wu *WalletUpdate) ClearCommunityID() *WalletUpdate {
	wu.mutation.ClearCommunityID()
	return wu
}

// SetUser sets the "user" edge to the User entity.
func (wu *WalletUpdate) SetUser(u *User) *WalletUpdate {
	return wu.SetUserID(u.ID)
}

// SetCommunity sets the "community" edge to the Community entity.
func (wu *WalletUpdate) SetCommunity(c *Community) *WalletUpdate {
	return wu.SetCommunityID(c.ID)
}

// AddFromTransactionIDs adds the "from_transactions" edge to the Transaction entity by IDs.
func (wu *WalletUpdate) AddFromTransactionIDs(ids ...uuid.UUID) *WalletUpdate {
	wu.mutation.AddFromTransactionIDs(ids...)
	return wu
}

// AddFromTransactions adds the "from_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) AddFromTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddFromTransactionIDs(ids...)
}

// AddToTransactionIDs adds the "to_transactions" edge to the Transaction entity by IDs.
func (wu *WalletUpdate) AddToTransactionIDs(ids ...uuid.UUID) *WalletUpdate {
	wu.mutation.AddToTransactionIDs(ids...)
	return wu
}

// AddToTransactions adds the "to_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) AddToTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.AddToTransactionIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wu *WalletUpdate) Mutation() *WalletMutation {
	return wu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wu *WalletUpdate) ClearUser() *WalletUpdate {
	wu.mutation.ClearUser()
	return wu
}

// ClearCommunity clears the "community" edge to the Community entity.
func (wu *WalletUpdate) ClearCommunity() *WalletUpdate {
	wu.mutation.ClearCommunity()
	return wu
}

// ClearFromTransactions clears all "from_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) ClearFromTransactions() *WalletUpdate {
	wu.mutation.ClearFromTransactions()
	return wu
}

// RemoveFromTransactionIDs removes the "from_transactions" edge to Transaction entities by IDs.
func (wu *WalletUpdate) RemoveFromTransactionIDs(ids ...uuid.UUID) *WalletUpdate {
	wu.mutation.RemoveFromTransactionIDs(ids...)
	return wu
}

// RemoveFromTransactions removes "from_transactions" edges to Transaction entities.
func (wu *WalletUpdate) RemoveFromTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveFromTransactionIDs(ids...)
}

// ClearToTransactions clears all "to_transactions" edges to the Transaction entity.
func (wu *WalletUpdate) ClearToTransactions() *WalletUpdate {
	wu.mutation.ClearToTransactions()
	return wu
}

// RemoveToTransactionIDs removes the "to_transactions" edge to Transaction entities by IDs.
func (wu *WalletUpdate) RemoveToTransactionIDs(ids ...uuid.UUID) *WalletUpdate {
	wu.mutation.RemoveToTransactionIDs(ids...)
	return wu
}

// RemoveToTransactions removes "to_transactions" edges to Transaction entities.
func (wu *WalletUpdate) RemoveToTransactions(t ...*Transaction) *WalletUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wu.RemoveToTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WalletUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WalletUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WalletUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WalletUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WalletUpdate) check() error {
	if v, ok := wu.mutation.Balance(); ok {
		if err := wallet.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Wallet.balance": %w`, err)}
		}
	}
	return nil
}

func (wu *WalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedBalance(); ok {
		_spec.AddField(wallet.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(wallet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.CommunityTable,
			Columns: []string{wallet.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.CommunityTable,
			Columns: []string{wallet.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.FromTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedFromTransactionsIDs(); len(nodes) > 0 && !wu.mutation.FromTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.FromTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.ToTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedToTransactionsIDs(); len(nodes) > 0 && !wu.mutation.ToTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.ToTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetBalance sets the "balance" field.
func (wuo *WalletUpdateOne) SetBalance(i int) *WalletUpdateOne {
	wuo.mutation.ResetBalance()
	wuo.mutation.SetBalance(i)
	return wuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableBalance(i *int) *WalletUpdateOne {
	if i != nil {
		wuo.SetBalance(*i)
	}
	return wuo
}

// AddBalance adds i to the "balance" field.
func (wuo *WalletUpdateOne) AddBalance(i int) *WalletUpdateOne {
	wuo.mutation.AddBalance(i)
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WalletUpdateOne) SetCreatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCreatedAt(t *time.Time) *WalletUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WalletUpdateOne) SetUpdatedAt(t time.Time) *WalletUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WalletUpdateOne) SetUserID(u uuid.UUID) *WalletUpdateOne {
	wuo.mutation.SetUserID(u)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableUserID(u *uuid.UUID) *WalletUpdateOne {
	if u != nil {
		wuo.SetUserID(*u)
	}
	return wuo
}

// ClearUserID clears the value of the "user_id" field.
func (wuo *WalletUpdateOne) ClearUserID() *WalletUpdateOne {
	wuo.mutation.ClearUserID()
	return wuo
}

// SetCommunityID sets the "community_id" field.
func (wuo *WalletUpdateOne) SetCommunityID(i int) *WalletUpdateOne {
	wuo.mutation.SetCommunityID(i)
	return wuo
}

// SetNillableCommunityID sets the "community_id" field if the given value is not nil.
func (wuo *WalletUpdateOne) SetNillableCommunityID(i *int) *WalletUpdateOne {
	if i != nil {
		wuo.SetCommunityID(*i)
	}
	return wuo
}

// ClearCommunityID clears the value of the "community_id" field.
func (wuo *WalletUpdateOne) ClearCommunityID() *WalletUpdateOne {
	wuo.mutation.ClearCommunityID()
	return wuo
}

// SetUser sets the "user" edge to the User entity.
func (wuo *WalletUpdateOne) SetUser(u *User) *WalletUpdateOne {
	return wuo.SetUserID(u.ID)
}

// SetCommunity sets the "community" edge to the Community entity.
func (wuo *WalletUpdateOne) SetCommunity(c *Community) *WalletUpdateOne {
	return wuo.SetCommunityID(c.ID)
}

// AddFromTransactionIDs adds the "from_transactions" edge to the Transaction entity by IDs.
func (wuo *WalletUpdateOne) AddFromTransactionIDs(ids ...uuid.UUID) *WalletUpdateOne {
	wuo.mutation.AddFromTransactionIDs(ids...)
	return wuo
}

// AddFromTransactions adds the "from_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) AddFromTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddFromTransactionIDs(ids...)
}

// AddToTransactionIDs adds the "to_transactions" edge to the Transaction entity by IDs.
func (wuo *WalletUpdateOne) AddToTransactionIDs(ids ...uuid.UUID) *WalletUpdateOne {
	wuo.mutation.AddToTransactionIDs(ids...)
	return wuo
}

// AddToTransactions adds the "to_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) AddToTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.AddToTransactionIDs(ids...)
}

// Mutation returns the WalletMutation object of the builder.
func (wuo *WalletUpdateOne) Mutation() *WalletMutation {
	return wuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wuo *WalletUpdateOne) ClearUser() *WalletUpdateOne {
	wuo.mutation.ClearUser()
	return wuo
}

// ClearCommunity clears the "community" edge to the Community entity.
func (wuo *WalletUpdateOne) ClearCommunity() *WalletUpdateOne {
	wuo.mutation.ClearCommunity()
	return wuo
}

// ClearFromTransactions clears all "from_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) ClearFromTransactions() *WalletUpdateOne {
	wuo.mutation.ClearFromTransactions()
	return wuo
}

// RemoveFromTransactionIDs removes the "from_transactions" edge to Transaction entities by IDs.
func (wuo *WalletUpdateOne) RemoveFromTransactionIDs(ids ...uuid.UUID) *WalletUpdateOne {
	wuo.mutation.RemoveFromTransactionIDs(ids...)
	return wuo
}

// RemoveFromTransactions removes "from_transactions" edges to Transaction entities.
func (wuo *WalletUpdateOne) RemoveFromTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveFromTransactionIDs(ids...)
}

// ClearToTransactions clears all "to_transactions" edges to the Transaction entity.
func (wuo *WalletUpdateOne) ClearToTransactions() *WalletUpdateOne {
	wuo.mutation.ClearToTransactions()
	return wuo
}

// RemoveToTransactionIDs removes the "to_transactions" edge to Transaction entities by IDs.
func (wuo *WalletUpdateOne) RemoveToTransactionIDs(ids ...uuid.UUID) *WalletUpdateOne {
	wuo.mutation.RemoveToTransactionIDs(ids...)
	return wuo
}

// RemoveToTransactions removes "to_transactions" edges to Transaction entities.
func (wuo *WalletUpdateOne) RemoveToTransactions(t ...*Transaction) *WalletUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wuo.RemoveToTransactionIDs(ids...)
}

// Where appends a list predicates to the WalletUpdate builder.
func (wuo *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Wallet entity.
func (wuo *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WalletUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := wallet.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WalletUpdateOne) check() error {
	if v, ok := wuo.mutation.Balance(); ok {
		if err := wallet.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Wallet.balance": %w`, err)}
		}
	}
	return nil
}

func (wuo *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Balance(); ok {
		_spec.SetField(wallet.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedBalance(); ok {
		_spec.AddField(wallet.FieldBalance, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(wallet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(wallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.UserTable,
			Columns: []string{wallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.CommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.CommunityTable,
			Columns: []string{wallet.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wallet.CommunityTable,
			Columns: []string{wallet.CommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.FromTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedFromTransactionsIDs(); len(nodes) > 0 && !wuo.mutation.FromTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.FromTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.FromTransactionsTable,
			Columns: []string{wallet.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.ToTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedToTransactionsIDs(); len(nodes) > 0 && !wuo.mutation.ToTransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.ToTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wallet.ToTransactionsTable,
			Columns: []string{wallet.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Wallet{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
