// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"suwasystem/backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTax, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTotalAmount, v))
}

// TransactionDate applies equality check predicate on the "transaction_date" field. It's identical to TransactionDateEQ.
func TransactionDate(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionDate, v))
}

// FromCommunityID applies equality check predicate on the "from_community_id" field. It's identical to FromCommunityIDEQ.
func FromCommunityID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromCommunityID, v))
}

// ToCommunityID applies equality check predicate on the "to_community_id" field. It's identical to ToCommunityIDEQ.
func ToCommunityID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToCommunityID, v))
}

// FromWalletID applies equality check predicate on the "from_wallet_id" field. It's identical to FromWalletIDEQ.
func FromWalletID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromWalletID, v))
}

// ToWalletID applies equality check predicate on the "to_wallet_id" field. It's identical to ToWalletIDEQ.
func ToWalletID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToWalletID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTax, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTotalAmount, v))
}

// TransactionDateEQ applies the EQ predicate on the "transaction_date" field.
func TransactionDateEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionDate, v))
}

// TransactionDateNEQ applies the NEQ predicate on the "transaction_date" field.
func TransactionDateNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionDate, v))
}

// TransactionDateIn applies the In predicate on the "transaction_date" field.
func TransactionDateIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionDate, vs...))
}

// TransactionDateNotIn applies the NotIn predicate on the "transaction_date" field.
func TransactionDateNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionDate, vs...))
}

// TransactionDateGT applies the GT predicate on the "transaction_date" field.
func TransactionDateGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionDate, v))
}

// TransactionDateGTE applies the GTE predicate on the "transaction_date" field.
func TransactionDateGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionDate, v))
}

// TransactionDateLT applies the LT predicate on the "transaction_date" field.
func TransactionDateLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionDate, v))
}

// TransactionDateLTE applies the LTE predicate on the "transaction_date" field.
func TransactionDateLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionDate, v))
}

// FromCommunityIDEQ applies the EQ predicate on the "from_community_id" field.
func FromCommunityIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromCommunityID, v))
}

// FromCommunityIDNEQ applies the NEQ predicate on the "from_community_id" field.
func FromCommunityIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFromCommunityID, v))
}

// FromCommunityIDIn applies the In predicate on the "from_community_id" field.
func FromCommunityIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFromCommunityID, vs...))
}

// FromCommunityIDNotIn applies the NotIn predicate on the "from_community_id" field.
func FromCommunityIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFromCommunityID, vs...))
}

// FromCommunityIDIsNil applies the IsNil predicate on the "from_community_id" field.
func FromCommunityIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldFromCommunityID))
}

// FromCommunityIDNotNil applies the NotNil predicate on the "from_community_id" field.
func FromCommunityIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldFromCommunityID))
}

// ToCommunityIDEQ applies the EQ predicate on the "to_community_id" field.
func ToCommunityIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToCommunityID, v))
}

// ToCommunityIDNEQ applies the NEQ predicate on the "to_community_id" field.
func ToCommunityIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldToCommunityID, v))
}

// ToCommunityIDIn applies the In predicate on the "to_community_id" field.
func ToCommunityIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldToCommunityID, vs...))
}

// ToCommunityIDNotIn applies the NotIn predicate on the "to_community_id" field.
func ToCommunityIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldToCommunityID, vs...))
}

// ToCommunityIDIsNil applies the IsNil predicate on the "to_community_id" field.
func ToCommunityIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldToCommunityID))
}

// ToCommunityIDNotNil applies the NotNil predicate on the "to_community_id" field.
func ToCommunityIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldToCommunityID))
}

// FromWalletIDEQ applies the EQ predicate on the "from_wallet_id" field.
func FromWalletIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldFromWalletID, v))
}

// FromWalletIDNEQ applies the NEQ predicate on the "from_wallet_id" field.
func FromWalletIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldFromWalletID, v))
}

// FromWalletIDIn applies the In predicate on the "from_wallet_id" field.
func FromWalletIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldFromWalletID, vs...))
}

// FromWalletIDNotIn applies the NotIn predicate on the "from_wallet_id" field.
func FromWalletIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldFromWalletID, vs...))
}

// FromWalletIDIsNil applies the IsNil predicate on the "from_wallet_id" field.
func FromWalletIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldFromWalletID))
}

// FromWalletIDNotNil applies the NotNil predicate on the "from_wallet_id" field.
func FromWalletIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldFromWalletID))
}

// ToWalletIDEQ applies the EQ predicate on the "to_wallet_id" field.
func ToWalletIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldToWalletID, v))
}

// ToWalletIDNEQ applies the NEQ predicate on the "to_wallet_id" field.
func ToWalletIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldToWalletID, v))
}

// ToWalletIDIn applies the In predicate on the "to_wallet_id" field.
func ToWalletIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldToWalletID, vs...))
}

// ToWalletIDNotIn applies the NotIn predicate on the "to_wallet_id" field.
func ToWalletIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldToWalletID, vs...))
}

// ToWalletIDIsNil applies the IsNil predicate on the "to_wallet_id" field.
func ToWalletIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldToWalletID))
}

// ToWalletIDNotNil applies the NotNil predicate on the "to_wallet_id" field.
func ToWalletIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldToWalletID))
}

// HasFromCommunity applies the HasEdge predicate on the "from_community" edge.
func HasFromCommunity() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromCommunityTable, FromCommunityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromCommunityWith applies the HasEdge predicate on the "from_community" edge with a given conditions (other predicates).
func HasFromCommunityWith(preds ...predicate.Community) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newFromCommunityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToCommunity applies the HasEdge predicate on the "to_community" edge.
func HasToCommunity() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToCommunityTable, ToCommunityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToCommunityWith applies the HasEdge predicate on the "to_community" edge with a given conditions (other predicates).
func HasToCommunityWith(preds ...predicate.Community) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newToCommunityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromWallet applies the HasEdge predicate on the "from_wallet" edge.
func HasFromWallet() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromWalletTable, FromWalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromWalletWith applies the HasEdge predicate on the "from_wallet" edge with a given conditions (other predicates).
func HasFromWalletWith(preds ...predicate.Wallet) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newFromWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToWallet applies the HasEdge predicate on the "to_wallet" edge.
func HasToWallet() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToWalletTable, ToWalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToWalletWith applies the HasEdge predicate on the "to_wallet" edge with a given conditions (other predicates).
func HasToWalletWith(preds ...predicate.Wallet) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newToWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
