// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/predicate"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/wallet"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(i int) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(i)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetAmount(*i)
	}
	return tu
}

// AddAmount adds i to the "amount" field.
func (tu *TransactionUpdate) AddAmount(i int) *TransactionUpdate {
	tu.mutation.AddAmount(i)
	return tu
}

// SetTax sets the "tax" field.
func (tu *TransactionUpdate) SetTax(i int) *TransactionUpdate {
	tu.mutation.ResetTax()
	tu.mutation.SetTax(i)
	return tu
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTax(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetTax(*i)
	}
	return tu
}

// AddTax adds i to the "tax" field.
func (tu *TransactionUpdate) AddTax(i int) *TransactionUpdate {
	tu.mutation.AddTax(i)
	return tu
}

// SetTotalAmount sets the "total_amount" field.
func (tu *TransactionUpdate) SetTotalAmount(i int) *TransactionUpdate {
	tu.mutation.ResetTotalAmount()
	tu.mutation.SetTotalAmount(i)
	return tu
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTotalAmount(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetTotalAmount(*i)
	}
	return tu
}

// AddTotalAmount adds i to the "total_amount" field.
func (tu *TransactionUpdate) AddTotalAmount(i int) *TransactionUpdate {
	tu.mutation.AddTotalAmount(i)
	return tu
}

// SetTransactionDate sets the "transaction_date" field.
func (tu *TransactionUpdate) SetTransactionDate(t time.Time) *TransactionUpdate {
	tu.mutation.SetTransactionDate(t)
	return tu
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionDate(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetTransactionDate(*t)
	}
	return tu
}

// SetFromCommunityID sets the "from_community_id" field.
func (tu *TransactionUpdate) SetFromCommunityID(i int) *TransactionUpdate {
	tu.mutation.SetFromCommunityID(i)
	return tu
}

// SetNillableFromCommunityID sets the "from_community_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableFromCommunityID(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetFromCommunityID(*i)
	}
	return tu
}

// ClearFromCommunityID clears the value of the "from_community_id" field.
func (tu *TransactionUpdate) ClearFromCommunityID() *TransactionUpdate {
	tu.mutation.ClearFromCommunityID()
	return tu
}

// SetToCommunityID sets the "to_community_id" field.
func (tu *TransactionUpdate) SetToCommunityID(i int) *TransactionUpdate {
	tu.mutation.SetToCommunityID(i)
	return tu
}

// SetNillableToCommunityID sets the "to_community_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableToCommunityID(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetToCommunityID(*i)
	}
	return tu
}

// ClearToCommunityID clears the value of the "to_community_id" field.
func (tu *TransactionUpdate) ClearToCommunityID() *TransactionUpdate {
	tu.mutation.ClearToCommunityID()
	return tu
}

// SetFromWalletID sets the "from_wallet_id" field.
func (tu *TransactionUpdate) SetFromWalletID(i int) *TransactionUpdate {
	tu.mutation.SetFromWalletID(i)
	return tu
}

// SetNillableFromWalletID sets the "from_wallet_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableFromWalletID(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetFromWalletID(*i)
	}
	return tu
}

// ClearFromWalletID clears the value of the "from_wallet_id" field.
func (tu *TransactionUpdate) ClearFromWalletID() *TransactionUpdate {
	tu.mutation.ClearFromWalletID()
	return tu
}

// SetToWalletID sets the "to_wallet_id" field.
func (tu *TransactionUpdate) SetToWalletID(i int) *TransactionUpdate {
	tu.mutation.SetToWalletID(i)
	return tu
}

// SetNillableToWalletID sets the "to_wallet_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableToWalletID(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetToWalletID(*i)
	}
	return tu
}

// ClearToWalletID clears the value of the "to_wallet_id" field.
func (tu *TransactionUpdate) ClearToWalletID() *TransactionUpdate {
	tu.mutation.ClearToWalletID()
	return tu
}

// SetFromCommunity sets the "from_community" edge to the Community entity.
func (tu *TransactionUpdate) SetFromCommunity(c *Community) *TransactionUpdate {
	return tu.SetFromCommunityID(c.ID)
}

// SetToCommunity sets the "to_community" edge to the Community entity.
func (tu *TransactionUpdate) SetToCommunity(c *Community) *TransactionUpdate {
	return tu.SetToCommunityID(c.ID)
}

// SetFromWallet sets the "from_wallet" edge to the Wallet entity.
func (tu *TransactionUpdate) SetFromWallet(w *Wallet) *TransactionUpdate {
	return tu.SetFromWalletID(w.ID)
}

// SetToWallet sets the "to_wallet" edge to the Wallet entity.
func (tu *TransactionUpdate) SetToWallet(w *Wallet) *TransactionUpdate {
	return tu.SetToWalletID(w.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearFromCommunity clears the "from_community" edge to the Community entity.
func (tu *TransactionUpdate) ClearFromCommunity() *TransactionUpdate {
	tu.mutation.ClearFromCommunity()
	return tu
}

// ClearToCommunity clears the "to_community" edge to the Community entity.
func (tu *TransactionUpdate) ClearToCommunity() *TransactionUpdate {
	tu.mutation.ClearToCommunity()
	return tu
}

// ClearFromWallet clears the "from_wallet" edge to the Wallet entity.
func (tu *TransactionUpdate) ClearFromWallet() *TransactionUpdate {
	tu.mutation.ClearFromWallet()
	return tu
}

// ClearToWallet clears the "to_wallet" edge to the Wallet entity.
func (tu *TransactionUpdate) ClearToWallet() *TransactionUpdate {
	tu.mutation.ClearToWallet()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Tax(); ok {
		if err := transaction.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Transaction.tax": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TotalAmount(); ok {
		if err := transaction.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.total_amount": %w`, err)}
		}
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Tax(); ok {
		_spec.SetField(transaction.FieldTax, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTax(); ok {
		_spec.AddField(transaction.FieldTax, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TotalAmount(); ok {
		_spec.SetField(transaction.FieldTotalAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTotalAmount(); ok {
		_spec.AddField(transaction.FieldTotalAmount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TransactionDate(); ok {
		_spec.SetField(transaction.FieldTransactionDate, field.TypeTime, value)
	}
	if tu.mutation.FromCommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromCommunityTable,
			Columns: []string{transaction.FromCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FromCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromCommunityTable,
			Columns: []string{transaction.FromCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ToCommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToCommunityTable,
			Columns: []string{transaction.ToCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ToCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToCommunityTable,
			Columns: []string{transaction.ToCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FromWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromWalletTable,
			Columns: []string{transaction.FromWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FromWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromWalletTable,
			Columns: []string{transaction.FromWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ToWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToWalletTable,
			Columns: []string{transaction.ToWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ToWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToWalletTable,
			Columns: []string{transaction.ToWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(i int) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(i)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetAmount(*i)
	}
	return tuo
}

// AddAmount adds i to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(i int) *TransactionUpdateOne {
	tuo.mutation.AddAmount(i)
	return tuo
}

// SetTax sets the "tax" field.
func (tuo *TransactionUpdateOne) SetTax(i int) *TransactionUpdateOne {
	tuo.mutation.ResetTax()
	tuo.mutation.SetTax(i)
	return tuo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTax(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetTax(*i)
	}
	return tuo
}

// AddTax adds i to the "tax" field.
func (tuo *TransactionUpdateOne) AddTax(i int) *TransactionUpdateOne {
	tuo.mutation.AddTax(i)
	return tuo
}

// SetTotalAmount sets the "total_amount" field.
func (tuo *TransactionUpdateOne) SetTotalAmount(i int) *TransactionUpdateOne {
	tuo.mutation.ResetTotalAmount()
	tuo.mutation.SetTotalAmount(i)
	return tuo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTotalAmount(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetTotalAmount(*i)
	}
	return tuo
}

// AddTotalAmount adds i to the "total_amount" field.
func (tuo *TransactionUpdateOne) AddTotalAmount(i int) *TransactionUpdateOne {
	tuo.mutation.AddTotalAmount(i)
	return tuo
}

// SetTransactionDate sets the "transaction_date" field.
func (tuo *TransactionUpdateOne) SetTransactionDate(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetTransactionDate(t)
	return tuo
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionDate(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetTransactionDate(*t)
	}
	return tuo
}

// SetFromCommunityID sets the "from_community_id" field.
func (tuo *TransactionUpdateOne) SetFromCommunityID(i int) *TransactionUpdateOne {
	tuo.mutation.SetFromCommunityID(i)
	return tuo
}

// SetNillableFromCommunityID sets the "from_community_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableFromCommunityID(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetFromCommunityID(*i)
	}
	return tuo
}

// ClearFromCommunityID clears the value of the "from_community_id" field.
func (tuo *TransactionUpdateOne) ClearFromCommunityID() *TransactionUpdateOne {
	tuo.mutation.ClearFromCommunityID()
	return tuo
}

// SetToCommunityID sets the "to_community_id" field.
func (tuo *TransactionUpdateOne) SetToCommunityID(i int) *TransactionUpdateOne {
	tuo.mutation.SetToCommunityID(i)
	return tuo
}

// SetNillableToCommunityID sets the "to_community_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableToCommunityID(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetToCommunityID(*i)
	}
	return tuo
}

// ClearToCommunityID clears the value of the "to_community_id" field.
func (tuo *TransactionUpdateOne) ClearToCommunityID() *TransactionUpdateOne {
	tuo.mutation.ClearToCommunityID()
	return tuo
}

// SetFromWalletID sets the "from_wallet_id" field.
func (tuo *TransactionUpdateOne) SetFromWalletID(i int) *TransactionUpdateOne {
	tuo.mutation.SetFromWalletID(i)
	return tuo
}

// SetNillableFromWalletID sets the "from_wallet_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableFromWalletID(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetFromWalletID(*i)
	}
	return tuo
}

// ClearFromWalletID clears the value of the "from_wallet_id" field.
func (tuo *TransactionUpdateOne) ClearFromWalletID() *TransactionUpdateOne {
	tuo.mutation.ClearFromWalletID()
	return tuo
}

// SetToWalletID sets the "to_wallet_id" field.
func (tuo *TransactionUpdateOne) SetToWalletID(i int) *TransactionUpdateOne {
	tuo.mutation.SetToWalletID(i)
	return tuo
}

// SetNillableToWalletID sets the "to_wallet_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableToWalletID(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetToWalletID(*i)
	}
	return tuo
}

// ClearToWalletID clears the value of the "to_wallet_id" field.
func (tuo *TransactionUpdateOne) ClearToWalletID() *TransactionUpdateOne {
	tuo.mutation.ClearToWalletID()
	return tuo
}

// SetFromCommunity sets the "from_community" edge to the Community entity.
func (tuo *TransactionUpdateOne) SetFromCommunity(c *Community) *TransactionUpdateOne {
	return tuo.SetFromCommunityID(c.ID)
}

// SetToCommunity sets the "to_community" edge to the Community entity.
func (tuo *TransactionUpdateOne) SetToCommunity(c *Community) *TransactionUpdateOne {
	return tuo.SetToCommunityID(c.ID)
}

// SetFromWallet sets the "from_wallet" edge to the Wallet entity.
func (tuo *TransactionUpdateOne) SetFromWallet(w *Wallet) *TransactionUpdateOne {
	return tuo.SetFromWalletID(w.ID)
}

// SetToWallet sets the "to_wallet" edge to the Wallet entity.
func (tuo *TransactionUpdateOne) SetToWallet(w *Wallet) *TransactionUpdateOne {
	return tuo.SetToWalletID(w.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearFromCommunity clears the "from_community" edge to the Community entity.
func (tuo *TransactionUpdateOne) ClearFromCommunity() *TransactionUpdateOne {
	tuo.mutation.ClearFromCommunity()
	return tuo
}

// ClearToCommunity clears the "to_community" edge to the Community entity.
func (tuo *TransactionUpdateOne) ClearToCommunity() *TransactionUpdateOne {
	tuo.mutation.ClearToCommunity()
	return tuo
}

// ClearFromWallet clears the "from_wallet" edge to the Wallet entity.
func (tuo *TransactionUpdateOne) ClearFromWallet() *TransactionUpdateOne {
	tuo.mutation.ClearFromWallet()
	return tuo
}

// ClearToWallet clears the "to_wallet" edge to the Wallet entity.
func (tuo *TransactionUpdateOne) ClearToWallet() *TransactionUpdateOne {
	tuo.mutation.ClearToWallet()
	return tuo
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Tax(); ok {
		if err := transaction.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Transaction.tax": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TotalAmount(); ok {
		if err := transaction.TotalAmountValidator(v); err != nil {
			return &ValidationError{Name: "total_amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.total_amount": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Tax(); ok {
		_spec.SetField(transaction.FieldTax, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTax(); ok {
		_spec.AddField(transaction.FieldTax, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TotalAmount(); ok {
		_spec.SetField(transaction.FieldTotalAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(transaction.FieldTotalAmount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TransactionDate(); ok {
		_spec.SetField(transaction.FieldTransactionDate, field.TypeTime, value)
	}
	if tuo.mutation.FromCommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromCommunityTable,
			Columns: []string{transaction.FromCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FromCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromCommunityTable,
			Columns: []string{transaction.FromCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ToCommunityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToCommunityTable,
			Columns: []string{transaction.ToCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ToCommunityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToCommunityTable,
			Columns: []string{transaction.ToCommunityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FromWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromWalletTable,
			Columns: []string{transaction.FromWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FromWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.FromWalletTable,
			Columns: []string{transaction.FromWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ToWalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToWalletTable,
			Columns: []string{transaction.ToWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ToWalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ToWalletTable,
			Columns: []string{transaction.ToWalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
