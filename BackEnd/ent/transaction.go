// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/wallet"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax int `json:"tax,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount int `json:"total_amount,omitempty"`
	// TransactionDate holds the value of the "transaction_date" field.
	TransactionDate time.Time `json:"transaction_date,omitempty"`
	// FromCommunityID holds the value of the "from_community_id" field.
	FromCommunityID int `json:"from_community_id,omitempty"`
	// ToCommunityID holds the value of the "to_community_id" field.
	ToCommunityID int `json:"to_community_id,omitempty"`
	// FromWalletID holds the value of the "from_wallet_id" field.
	FromWalletID int `json:"from_wallet_id,omitempty"`
	// ToWalletID holds the value of the "to_wallet_id" field.
	ToWalletID int `json:"to_wallet_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges        TransactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// FromCommunity holds the value of the from_community edge.
	FromCommunity *Community `json:"from_community,omitempty"`
	// ToCommunity holds the value of the to_community edge.
	ToCommunity *Community `json:"to_community,omitempty"`
	// FromWallet holds the value of the from_wallet edge.
	FromWallet *Wallet `json:"from_wallet,omitempty"`
	// ToWallet holds the value of the to_wallet edge.
	ToWallet *Wallet `json:"to_wallet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FromCommunityOrErr returns the FromCommunity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) FromCommunityOrErr() (*Community, error) {
	if e.FromCommunity != nil {
		return e.FromCommunity, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: community.Label}
	}
	return nil, &NotLoadedError{edge: "from_community"}
}

// ToCommunityOrErr returns the ToCommunity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) ToCommunityOrErr() (*Community, error) {
	if e.ToCommunity != nil {
		return e.ToCommunity, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: community.Label}
	}
	return nil, &NotLoadedError{edge: "to_community"}
}

// FromWalletOrErr returns the FromWallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) FromWalletOrErr() (*Wallet, error) {
	if e.FromWallet != nil {
		return e.FromWallet, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: wallet.Label}
	}
	return nil, &NotLoadedError{edge: "from_wallet"}
}

// ToWalletOrErr returns the ToWallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) ToWalletOrErr() (*Wallet, error) {
	if e.ToWallet != nil {
		return e.ToWallet, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: wallet.Label}
	}
	return nil, &NotLoadedError{edge: "to_wallet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldAmount, transaction.FieldTax, transaction.FieldTotalAmount, transaction.FieldFromCommunityID, transaction.FieldToCommunityID, transaction.FieldFromWalletID, transaction.FieldToWalletID:
			values[i] = new(sql.NullInt64)
		case transaction.FieldTransactionDate:
			values[i] = new(sql.NullTime)
		case transaction.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = int(value.Int64)
			}
		case transaction.FieldTax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				t.Tax = int(value.Int64)
			}
		case transaction.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				t.TotalAmount = int(value.Int64)
			}
		case transaction.FieldTransactionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_date", values[i])
			} else if value.Valid {
				t.TransactionDate = value.Time
			}
		case transaction.FieldFromCommunityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_community_id", values[i])
			} else if value.Valid {
				t.FromCommunityID = int(value.Int64)
			}
		case transaction.FieldToCommunityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_community_id", values[i])
			} else if value.Valid {
				t.ToCommunityID = int(value.Int64)
			}
		case transaction.FieldFromWalletID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_wallet_id", values[i])
			} else if value.Valid {
				t.FromWalletID = int(value.Int64)
			}
		case transaction.FieldToWalletID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_wallet_id", values[i])
			} else if value.Valid {
				t.ToWalletID = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryFromCommunity queries the "from_community" edge of the Transaction entity.
func (t *Transaction) QueryFromCommunity() *CommunityQuery {
	return NewTransactionClient(t.config).QueryFromCommunity(t)
}

// QueryToCommunity queries the "to_community" edge of the Transaction entity.
func (t *Transaction) QueryToCommunity() *CommunityQuery {
	return NewTransactionClient(t.config).QueryToCommunity(t)
}

// QueryFromWallet queries the "from_wallet" edge of the Transaction entity.
func (t *Transaction) QueryFromWallet() *WalletQuery {
	return NewTransactionClient(t.config).QueryFromWallet(t)
}

// QueryToWallet queries the "to_wallet" edge of the Transaction entity.
func (t *Transaction) QueryToWallet() *WalletQuery {
	return NewTransactionClient(t.config).QueryToWallet(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("tax=")
	builder.WriteString(fmt.Sprintf("%v", t.Tax))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("transaction_date=")
	builder.WriteString(t.TransactionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("from_community_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FromCommunityID))
	builder.WriteString(", ")
	builder.WriteString("to_community_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ToCommunityID))
	builder.WriteString(", ")
	builder.WriteString("from_wallet_id=")
	builder.WriteString(fmt.Sprintf("%v", t.FromWalletID))
	builder.WriteString(", ")
	builder.WriteString("to_wallet_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ToWalletID))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
