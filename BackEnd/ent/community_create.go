// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"suwasystem/backend/ent/community"
	"suwasystem/backend/ent/transaction"
	"suwasystem/backend/ent/user"
	"suwasystem/backend/ent/wallet"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CommunityCreate is the builder for creating a Community entity.
type CommunityCreate struct {
	config
	mutation *CommunityMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CommunityCreate) SetName(s string) *CommunityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CommunityCreate) SetDescription(s string) *CommunityCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableDescription(s *string) *CommunityCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetRate sets the "rate" field.
func (cc *CommunityCreate) SetRate(f float32) *CommunityCreate {
	cc.mutation.SetRate(f)
	return cc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableRate(f *float32) *CommunityCreate {
	if f != nil {
		cc.SetRate(*f)
	}
	return cc
}

// SetTax sets the "tax" field.
func (cc *CommunityCreate) SetTax(f float32) *CommunityCreate {
	cc.mutation.SetTax(f)
	return cc
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableTax(f *float32) *CommunityCreate {
	if f != nil {
		cc.SetTax(*f)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommunityCreate) SetCreatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableCreatedAt(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommunityCreate) SetUpdatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableUpdatedAt(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetOwnerUserID sets the "owner_user_id" field.
func (cc *CommunityCreate) SetOwnerUserID(u uuid.UUID) *CommunityCreate {
	cc.mutation.SetOwnerUserID(u)
	return cc
}

// SetNillableOwnerUserID sets the "owner_user_id" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableOwnerUserID(u *uuid.UUID) *CommunityCreate {
	if u != nil {
		cc.SetOwnerUserID(*u)
	}
	return cc
}

// AddWalletIDs adds the "wallets" edge to the Wallet entity by IDs.
func (cc *CommunityCreate) AddWalletIDs(ids ...int) *CommunityCreate {
	cc.mutation.AddWalletIDs(ids...)
	return cc
}

// AddWallets adds the "wallets" edges to the Wallet entity.
func (cc *CommunityCreate) AddWallets(w ...*Wallet) *CommunityCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cc.AddWalletIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CommunityCreate) SetOwnerID(id uuid.UUID) *CommunityCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CommunityCreate) SetNillableOwnerID(id *uuid.UUID) *CommunityCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CommunityCreate) SetOwner(u *User) *CommunityCreate {
	return cc.SetOwnerID(u.ID)
}

// AddFromTransactionIDs adds the "from_transactions" edge to the Transaction entity by IDs.
func (cc *CommunityCreate) AddFromTransactionIDs(ids ...uuid.UUID) *CommunityCreate {
	cc.mutation.AddFromTransactionIDs(ids...)
	return cc
}

// AddFromTransactions adds the "from_transactions" edges to the Transaction entity.
func (cc *CommunityCreate) AddFromTransactions(t ...*Transaction) *CommunityCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddFromTransactionIDs(ids...)
}

// AddToTransactionIDs adds the "to_transactions" edge to the Transaction entity by IDs.
func (cc *CommunityCreate) AddToTransactionIDs(ids ...uuid.UUID) *CommunityCreate {
	cc.mutation.AddToTransactionIDs(ids...)
	return cc
}

// AddToTransactions adds the "to_transactions" edges to the Transaction entity.
func (cc *CommunityCreate) AddToTransactions(t ...*Transaction) *CommunityCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddToTransactionIDs(ids...)
}

// Mutation returns the CommunityMutation object of the builder.
func (cc *CommunityCreate) Mutation() *CommunityMutation {
	return cc.mutation
}

// Save creates the Community in the database.
func (cc *CommunityCreate) Save(ctx context.Context) (*Community, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommunityCreate) SaveX(ctx context.Context) *Community {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommunityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommunityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommunityCreate) defaults() {
	if _, ok := cc.mutation.Rate(); !ok {
		v := community.DefaultRate
		cc.mutation.SetRate(v)
	}
	if _, ok := cc.mutation.Tax(); !ok {
		v := community.DefaultTax
		cc.mutation.SetTax(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := community.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := community.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommunityCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Community.name"`)}
	}
	if _, ok := cc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "Community.rate"`)}
	}
	if v, ok := cc.mutation.Rate(); ok {
		if err := community.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Community.rate": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Tax(); !ok {
		return &ValidationError{Name: "tax", err: errors.New(`ent: missing required field "Community.tax"`)}
	}
	if v, ok := cc.mutation.Tax(); ok {
		if err := community.TaxValidator(v); err != nil {
			return &ValidationError{Name: "tax", err: fmt.Errorf(`ent: validator failed for field "Community.tax": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Community.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Community.updated_at"`)}
	}
	return nil
}

func (cc *CommunityCreate) sqlSave(ctx context.Context) (*Community, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommunityCreate) createSpec() (*Community, *sqlgraph.CreateSpec) {
	var (
		_node = &Community{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(community.Table, sqlgraph.NewFieldSpec(community.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(community.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(community.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Rate(); ok {
		_spec.SetField(community.FieldRate, field.TypeFloat32, value)
		_node.Rate = value
	}
	if value, ok := cc.mutation.Tax(); ok {
		_spec.SetField(community.FieldTax, field.TypeFloat32, value)
		_node.Tax = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(community.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(community.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.WalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.WalletsTable,
			Columns: []string{community.WalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   community.OwnerTable,
			Columns: []string{community.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FromTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.FromTransactionsTable,
			Columns: []string{community.FromTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ToTransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   community.ToTransactionsTable,
			Columns: []string{community.ToTransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommunityCreateBulk is the builder for creating many Community entities in bulk.
type CommunityCreateBulk struct {
	config
	err      error
	builders []*CommunityCreate
}

// Save creates the Community entities in the database.
func (ccb *CommunityCreateBulk) Save(ctx context.Context) ([]*Community, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Community, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommunityCreateBulk) SaveX(ctx context.Context) []*Community {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommunityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommunityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
