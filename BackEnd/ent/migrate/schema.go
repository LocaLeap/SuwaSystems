// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommunitiesColumns holds the columns for the "communities" table.
	CommunitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "rate", Type: field.TypeFloat32, Default: 1},
		{Name: "tax", Type: field.TypeFloat32, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "owner_user_id", Type: field.TypeUUID, Nullable: true},
	}
	// CommunitiesTable holds the schema information for the "communities" table.
	CommunitiesTable = &schema.Table{
		Name:       "communities",
		Columns:    CommunitiesColumns,
		PrimaryKey: []*schema.Column{CommunitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "communities_users_owner_communities",
				Columns:    []*schema.Column{CommunitiesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "amount", Type: field.TypeInt},
		{Name: "tax", Type: field.TypeInt, Default: 0},
		{Name: "total_amount", Type: field.TypeInt},
		{Name: "transaction_date", Type: field.TypeTime},
		{Name: "from_community_id", Type: field.TypeInt, Nullable: true},
		{Name: "to_community_id", Type: field.TypeInt, Nullable: true},
		{Name: "from_wallet_id", Type: field.TypeInt, Nullable: true},
		{Name: "to_wallet_id", Type: field.TypeInt, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_communities_from_transactions",
				Columns:    []*schema.Column{TransactionsColumns[5]},
				RefColumns: []*schema.Column{CommunitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_communities_to_transactions",
				Columns:    []*schema.Column{TransactionsColumns[6]},
				RefColumns: []*schema.Column{CommunitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_wallets_from_transactions",
				Columns:    []*schema.Column{TransactionsColumns[7]},
				RefColumns: []*schema.Column{WalletsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_wallets_to_transactions",
				Columns:    []*schema.Column{TransactionsColumns[8]},
				RefColumns: []*schema.Column{WalletsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"CARD", "MOBILE"}},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "password_hash", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WalletsColumns holds the columns for the "wallets" table.
	WalletsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "balance", Type: field.TypeInt, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "community_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID, Nullable: true},
	}
	// WalletsTable holds the schema information for the "wallets" table.
	WalletsTable = &schema.Table{
		Name:       "wallets",
		Columns:    WalletsColumns,
		PrimaryKey: []*schema.Column{WalletsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "wallets_communities_wallets",
				Columns:    []*schema.Column{WalletsColumns[4]},
				RefColumns: []*schema.Column{CommunitiesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "wallets_users_wallets",
				Columns:    []*schema.Column{WalletsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommunitiesTable,
		TransactionsTable,
		UsersTable,
		WalletsTable,
	}
)

func init() {
	CommunitiesTable.ForeignKeys[0].RefTable = UsersTable
	TransactionsTable.ForeignKeys[0].RefTable = CommunitiesTable
	TransactionsTable.ForeignKeys[1].RefTable = CommunitiesTable
	TransactionsTable.ForeignKeys[2].RefTable = WalletsTable
	TransactionsTable.ForeignKeys[3].RefTable = WalletsTable
	WalletsTable.ForeignKeys[0].RefTable = CommunitiesTable
	WalletsTable.ForeignKeys[1].RefTable = UsersTable
}
